

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Mon Feb 17 13:50:59 2020

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	dabs	1,0x7E,2
    19  0000                     
    20                           ; Version 2.05
    21                           ; Generated 20/12/2018 GMT
    22                           ; 
    23                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC16F887 Definitions
    52                           ; 
    53                           ; SFR Addresses
    54  0000                     	;# 
    55  0001                     	;# 
    56  0002                     	;# 
    57  0003                     	;# 
    58  0004                     	;# 
    59  0005                     	;# 
    60  0006                     	;# 
    61  0007                     	;# 
    62  0008                     	;# 
    63  0009                     	;# 
    64  000A                     	;# 
    65  000B                     	;# 
    66  000C                     	;# 
    67  000D                     	;# 
    68  000E                     	;# 
    69  000E                     	;# 
    70  000F                     	;# 
    71  0010                     	;# 
    72  0011                     	;# 
    73  0012                     	;# 
    74  0013                     	;# 
    75  0014                     	;# 
    76  0015                     	;# 
    77  0015                     	;# 
    78  0016                     	;# 
    79  0017                     	;# 
    80  0018                     	;# 
    81  0019                     	;# 
    82  001A                     	;# 
    83  001B                     	;# 
    84  001B                     	;# 
    85  001C                     	;# 
    86  001D                     	;# 
    87  001E                     	;# 
    88  001F                     	;# 
    89  0081                     	;# 
    90  0085                     	;# 
    91  0086                     	;# 
    92  0087                     	;# 
    93  0088                     	;# 
    94  0089                     	;# 
    95  008C                     	;# 
    96  008D                     	;# 
    97  008E                     	;# 
    98  008F                     	;# 
    99  0090                     	;# 
   100  0091                     	;# 
   101  0092                     	;# 
   102  0093                     	;# 
   103  0093                     	;# 
   104  0093                     	;# 
   105  0094                     	;# 
   106  0095                     	;# 
   107  0096                     	;# 
   108  0097                     	;# 
   109  0098                     	;# 
   110  0099                     	;# 
   111  009A                     	;# 
   112  009B                     	;# 
   113  009C                     	;# 
   114  009D                     	;# 
   115  009E                     	;# 
   116  009F                     	;# 
   117  0105                     	;# 
   118  0107                     	;# 
   119  0108                     	;# 
   120  0109                     	;# 
   121  010C                     	;# 
   122  010C                     	;# 
   123  010D                     	;# 
   124  010E                     	;# 
   125  010F                     	;# 
   126  0185                     	;# 
   127  0187                     	;# 
   128  0188                     	;# 
   129  0189                     	;# 
   130  018C                     	;# 
   131  018D                     	;# 
   132  0000                     	;# 
   133  0001                     	;# 
   134  0002                     	;# 
   135  0003                     	;# 
   136  0004                     	;# 
   137  0005                     	;# 
   138  0006                     	;# 
   139  0007                     	;# 
   140  0008                     	;# 
   141  0009                     	;# 
   142  000A                     	;# 
   143  000B                     	;# 
   144  000C                     	;# 
   145  000D                     	;# 
   146  000E                     	;# 
   147  000E                     	;# 
   148  000F                     	;# 
   149  0010                     	;# 
   150  0011                     	;# 
   151  0012                     	;# 
   152  0013                     	;# 
   153  0014                     	;# 
   154  0015                     	;# 
   155  0015                     	;# 
   156  0016                     	;# 
   157  0017                     	;# 
   158  0018                     	;# 
   159  0019                     	;# 
   160  001A                     	;# 
   161  001B                     	;# 
   162  001B                     	;# 
   163  001C                     	;# 
   164  001D                     	;# 
   165  001E                     	;# 
   166  001F                     	;# 
   167  0081                     	;# 
   168  0085                     	;# 
   169  0086                     	;# 
   170  0087                     	;# 
   171  0088                     	;# 
   172  0089                     	;# 
   173  008C                     	;# 
   174  008D                     	;# 
   175  008E                     	;# 
   176  008F                     	;# 
   177  0090                     	;# 
   178  0091                     	;# 
   179  0092                     	;# 
   180  0093                     	;# 
   181  0093                     	;# 
   182  0093                     	;# 
   183  0094                     	;# 
   184  0095                     	;# 
   185  0096                     	;# 
   186  0097                     	;# 
   187  0098                     	;# 
   188  0099                     	;# 
   189  009A                     	;# 
   190  009B                     	;# 
   191  009C                     	;# 
   192  009D                     	;# 
   193  009E                     	;# 
   194  009F                     	;# 
   195  0105                     	;# 
   196  0107                     	;# 
   197  0108                     	;# 
   198  0109                     	;# 
   199  010C                     	;# 
   200  010C                     	;# 
   201  010D                     	;# 
   202  010E                     	;# 
   203  010F                     	;# 
   204  0185                     	;# 
   205  0187                     	;# 
   206  0188                     	;# 
   207  0189                     	;# 
   208  018C                     	;# 
   209  018D                     	;# 
   210  0000                     	;# 
   211  0001                     	;# 
   212  0002                     	;# 
   213  0003                     	;# 
   214  0004                     	;# 
   215  0005                     	;# 
   216  0006                     	;# 
   217  0007                     	;# 
   218  0008                     	;# 
   219  0009                     	;# 
   220  000A                     	;# 
   221  000B                     	;# 
   222  000C                     	;# 
   223  000D                     	;# 
   224  000E                     	;# 
   225  000E                     	;# 
   226  000F                     	;# 
   227  0010                     	;# 
   228  0011                     	;# 
   229  0012                     	;# 
   230  0013                     	;# 
   231  0014                     	;# 
   232  0015                     	;# 
   233  0015                     	;# 
   234  0016                     	;# 
   235  0017                     	;# 
   236  0018                     	;# 
   237  0019                     	;# 
   238  001A                     	;# 
   239  001B                     	;# 
   240  001B                     	;# 
   241  001C                     	;# 
   242  001D                     	;# 
   243  001E                     	;# 
   244  001F                     	;# 
   245  0081                     	;# 
   246  0085                     	;# 
   247  0086                     	;# 
   248  0087                     	;# 
   249  0088                     	;# 
   250  0089                     	;# 
   251  008C                     	;# 
   252  008D                     	;# 
   253  008E                     	;# 
   254  008F                     	;# 
   255  0090                     	;# 
   256  0091                     	;# 
   257  0092                     	;# 
   258  0093                     	;# 
   259  0093                     	;# 
   260  0093                     	;# 
   261  0094                     	;# 
   262  0095                     	;# 
   263  0096                     	;# 
   264  0097                     	;# 
   265  0098                     	;# 
   266  0099                     	;# 
   267  009A                     	;# 
   268  009B                     	;# 
   269  009C                     	;# 
   270  009D                     	;# 
   271  009E                     	;# 
   272  009F                     	;# 
   273  0105                     	;# 
   274  0107                     	;# 
   275  0108                     	;# 
   276  0109                     	;# 
   277  010C                     	;# 
   278  010C                     	;# 
   279  010D                     	;# 
   280  010E                     	;# 
   281  010F                     	;# 
   282  0185                     	;# 
   283  0187                     	;# 
   284  0188                     	;# 
   285  0189                     	;# 
   286  018C                     	;# 
   287  018D                     	;# 
   288  0000                     	;# 
   289  0001                     	;# 
   290  0002                     	;# 
   291  0003                     	;# 
   292  0004                     	;# 
   293  0005                     	;# 
   294  0006                     	;# 
   295  0007                     	;# 
   296  0008                     	;# 
   297  0009                     	;# 
   298  000A                     	;# 
   299  000B                     	;# 
   300  000C                     	;# 
   301  000D                     	;# 
   302  000E                     	;# 
   303  000E                     	;# 
   304  000F                     	;# 
   305  0010                     	;# 
   306  0011                     	;# 
   307  0012                     	;# 
   308  0013                     	;# 
   309  0014                     	;# 
   310  0015                     	;# 
   311  0015                     	;# 
   312  0016                     	;# 
   313  0017                     	;# 
   314  0018                     	;# 
   315  0019                     	;# 
   316  001A                     	;# 
   317  001B                     	;# 
   318  001B                     	;# 
   319  001C                     	;# 
   320  001D                     	;# 
   321  001E                     	;# 
   322  001F                     	;# 
   323  0081                     	;# 
   324  0085                     	;# 
   325  0086                     	;# 
   326  0087                     	;# 
   327  0088                     	;# 
   328  0089                     	;# 
   329  008C                     	;# 
   330  008D                     	;# 
   331  008E                     	;# 
   332  008F                     	;# 
   333  0090                     	;# 
   334  0091                     	;# 
   335  0092                     	;# 
   336  0093                     	;# 
   337  0093                     	;# 
   338  0093                     	;# 
   339  0094                     	;# 
   340  0095                     	;# 
   341  0096                     	;# 
   342  0097                     	;# 
   343  0098                     	;# 
   344  0099                     	;# 
   345  009A                     	;# 
   346  009B                     	;# 
   347  009C                     	;# 
   348  009D                     	;# 
   349  009E                     	;# 
   350  009F                     	;# 
   351  0105                     	;# 
   352  0107                     	;# 
   353  0108                     	;# 
   354  0109                     	;# 
   355  010C                     	;# 
   356  010C                     	;# 
   357  010D                     	;# 
   358  010E                     	;# 
   359  010F                     	;# 
   360  0185                     	;# 
   361  0187                     	;# 
   362  0188                     	;# 
   363  0189                     	;# 
   364  018C                     	;# 
   365  018D                     	;# 
   366                           
   367                           	psect	idataBANK0
   368  05C5                     __pidataBANK0:	
   369                           
   370                           ;initializer for _order
   371  05C5  3416               	retlw	22
   372  0014                     _SSPCON	set	20
   373  0019                     _TXREG	set	25
   374  001A                     _RCREG	set	26
   375  0018                     _RCSTAbits	set	24
   376  0013                     _SSPBUF	set	19
   377  000C                     _PIR1bits	set	12
   378  0006                     _PORTB	set	6
   379  0094                     _SSPSTATbits	set	148
   380  0094                     _SSPSTAT	set	148
   381  0099                     _SPBRG	set	153
   382  0098                     _TXSTAbits	set	152
   383  0086                     _TRISB	set	134
   384  043B                     _TRISC3	set	1083
   385  043D                     _TRISC5	set	1085
   386  043E                     _TRISC6	set	1086
   387  043F                     _TRISC7	set	1087
   388  04A0                     _BF	set	1184
   389                           
   390                           ; #config settings
   391  0000                     
   392                           	psect	cinit
   393  07F4                     start_initialization:	
   394  07F4                     __initialization:	
   395                           
   396                           ; Initialize objects allocated to BANK0
   397  07F4  120A  118A  25C5   	fcall	__pidataBANK0	;fetch initializer
   398  07F7  00B7               	movwf	__pdataBANK0& (0+127)
   399                           
   400                           ; Clear objects allocated to BANK0
   401  07F8  01B4               	clrf	__pbssBANK0& (0+127)
   402  07F9  01B5               	clrf	(__pbssBANK0+1)& (0+127)
   403  07FA  01B6               	clrf	(__pbssBANK0+2)& (0+127)
   404                           
   405                           ; Clear objects allocated to COMMON
   406  07FB  01FD               	clrf	__pbssCOMMON& (0+127)
   407  07FC                     end_of_initialization:	
   408                           ;End of C runtime variable initialization code
   409                           
   410  07FC                     __end_of__initialization:	
   411  07FC  0183               	clrf	3
   412  07FD  120A  118A  2E7D   	ljmp	_main	;jump to C main() function
   413                           
   414                           	psect	bssCOMMON
   415  007D                     __pbssCOMMON:	
   416  007D                     _valorSerial:	
   417  007D                     	ds	1
   418                           
   419                           	psect	bssBANK0
   420  0034                     __pbssBANK0:	
   421  0034                     _bandera_enviar:	
   422  0034                     	ds	1
   423  0035                     _recibido_pot2:	
   424  0035                     	ds	1
   425  0036                     _recibido_pot1:	
   426  0036                     	ds	1
   427                           
   428                           	psect	dataBANK0
   429  0037                     __pdataBANK0:	
   430  0037                     _order:	
   431  0037                     	ds	1
   432                           
   433                           	psect	cstackCOMMON
   434  0070                     __pcstackCOMMON:	
   435  0070                     ?_SPI_init:	
   436  0070                     ?_uartRC_Read:	
   437                           ; 1 bytes @ 0x0
   438                           
   439  0070                     ??_uartRC_Read:	
   440                           ; 1 bytes @ 0x0
   441                           
   442  0070                     ?_uartTX_Write:	
   443                           ; 1 bytes @ 0x0
   444                           
   445  0070                     ??_uartTX_Write:	
   446                           ; 1 bytes @ 0x0
   447                           
   448  0070                     ?_SPI_write:	
   449                           ; 1 bytes @ 0x0
   450                           
   451  0070                     ??_SPI_write:	
   452                           ; 1 bytes @ 0x0
   453                           
   454  0070                     ?_main:	
   455                           ; 1 bytes @ 0x0
   456                           
   457  0070                     ?___aldiv:	
   458                           ; 1 bytes @ 0x0
   459                           
   460  0070                     uartTX_Write@dato:	
   461                           ; 4 bytes @ 0x0
   462                           
   463  0070                     SPI_init@muestra:	
   464                           ; 1 bytes @ 0x0
   465                           
   466  0070                     SPI_write@dato:	
   467                           ; 1 bytes @ 0x0
   468                           
   469  0070                     ___aldiv@divisor:	
   470                           ; 1 bytes @ 0x0
   471                           
   472                           
   473                           ; 4 bytes @ 0x0
   474  0070                     	ds	1
   475  0071                     SPI_init@idle:	
   476                           
   477                           ; 1 bytes @ 0x1
   478  0071                     	ds	1
   479  0072                     SPI_init@edge:	
   480                           
   481                           ; 1 bytes @ 0x2
   482  0072                     	ds	1
   483  0073                     ??_SPI_init:	
   484  0073                     SPI_init@modo:	
   485                           ; 1 bytes @ 0x3
   486                           
   487                           
   488                           ; 1 bytes @ 0x3
   489  0073                     	ds	1
   490  0074                     ___aldiv@dividend:	
   491                           
   492                           ; 4 bytes @ 0x4
   493  0074                     	ds	4
   494  0078                     ??___aldiv:	
   495                           
   496                           ; 1 bytes @ 0x8
   497  0078                     	ds	1
   498  0079                     uart_init@n:	
   499                           
   500                           ; 2 bytes @ 0x9
   501  0079                     	ds	2
   502  007B                     ??_main:	
   503                           
   504                           ; 1 bytes @ 0xB
   505  007B                     	ds	2
   506                           
   507                           	psect	cstackBANK0
   508  0020                     __pcstackBANK0:	
   509  0020                     ___aldiv@counter:	
   510                           
   511                           ; 1 bytes @ 0x0
   512  0020                     	ds	1
   513  0021                     ___aldiv@sign:	
   514                           
   515                           ; 1 bytes @ 0x1
   516  0021                     	ds	1
   517  0022                     ___aldiv@quotient:	
   518                           
   519                           ; 4 bytes @ 0x2
   520  0022                     	ds	4
   521  0026                     ?_uart_init:	
   522  0026                     uart_init@baudrate:	
   523                           ; 1 bytes @ 0x6
   524                           
   525                           
   526                           ; 2 bytes @ 0x6
   527  0026                     	ds	2
   528  0028                     ??_uart_init:	
   529                           
   530                           ; 1 bytes @ 0x8
   531  0028                     	ds	12
   532                           
   533                           	psect	maintext
   534  067D                     __pmaintext:	
   535 ;;
   536 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   537 ;;
   538 ;; *************** function _main *****************
   539 ;; Defined at:
   540 ;;		line 36 in file "MasterMain.c"
   541 ;; Parameters:    Size  Location     Type
   542 ;;		None
   543 ;; Auto vars:     Size  Location     Type
   544 ;;		None
   545 ;; Return value:  Size  Location     Type
   546 ;;                  1    wreg      void 
   547 ;; Registers used:
   548 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   549 ;; Tracked objects:
   550 ;;		On entry : B00/0
   551 ;;		On exit  : 0/0
   552 ;;		Unchanged: 0/0
   553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   554 ;;      Params:         0       0       0       0       0
   555 ;;      Locals:         0       0       0       0       0
   556 ;;      Temps:          2       0       0       0       0
   557 ;;      Totals:         2       0       0       0       0
   558 ;;Total ram usage:        2 bytes
   559 ;; Hardware stack levels required when called:    2
   560 ;; This function calls:
   561 ;;		_SPI_init
   562 ;;		_SPI_write
   563 ;;		_uartRC_Read
   564 ;;		_uartTX_Write
   565 ;;		_uart_init
   566 ;; This function is called by:
   567 ;;		Startup code after reset
   568 ;; This function uses a non-reentrant model
   569 ;;
   570                           
   571                           
   572                           ;psect for function _main
   573  067D                     _main:	
   574                           
   575                           ;MasterMain.c: 37:     TRISB = 0;
   576                           
   577                           ;incstack = 0
   578                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   579  067D  1683               	bsf	3,5	;RP0=1, select bank1
   580  067E  1303               	bcf	3,6	;RP1=0, select bank1
   581  067F  0186               	clrf	6	;volatile
   582                           
   583                           ;MasterMain.c: 38:     PORTB = 0;
   584  0680  1283               	bcf	3,5	;RP0=0, select bank0
   585  0681  1303               	bcf	3,6	;RP1=0, select bank0
   586  0682  0186               	clrf	6	;volatile
   587                           
   588                           ;MasterMain.c: 39:     SPI_init(SPI_MASTER_4,SPI_SAMPLE_MID,SPI_CLK_IDLE_LOW,SPI_IDLE_TO
      +                          _ACTIVE);
   589  0683  01F0               	clrf	SPI_init@muestra
   590  0684  01F1               	clrf	SPI_init@idle
   591  0685  01F2               	clrf	SPI_init@edge
   592  0686  3020               	movlw	32
   593  0687  120A  118A  25DA  120A  118A  	fcall	_SPI_init
   594                           
   595                           ;MasterMain.c: 40:     uart_init(300);
   596  068C  302C               	movlw	44
   597  068D  1283               	bcf	3,5	;RP0=0, select bank0
   598  068E  1303               	bcf	3,6	;RP1=0, select bank0
   599  068F  00A6               	movwf	uart_init@baudrate
   600  0690  3001               	movlw	1
   601  0691  00A7               	movwf	uart_init@baudrate+1
   602  0692  120A  118A  272A  120A  118A  	fcall	_uart_init
   603                           
   604                           ;MasterMain.c: 53:         switch(order){
   605  0697  2EF2               	goto	l984
   606  0698                     l994:	
   607                           
   608                           ;MasterMain.c: 55:                 if (!bandera_enviar){
   609  0698  0834               	movf	_bandera_enviar,w
   610  0699  1D03               	btfss	3,2
   611  069A  2EAE               	goto	l1002
   612                           
   613                           ;MasterMain.c: 56:                     SPI_write(order);
   614  069B  0837               	movf	_order,w
   615  069C  120A  118A  25CA  120A  118A  	fcall	_SPI_write
   616                           
   617                           ;MasterMain.c: 57:                     _delay((unsigned long)((10)*(4000000/4000.0)));
   618  06A1  300D               	movlw	13
   619  06A2  00FC               	movwf	??_main+1
   620  06A3  30FB               	movlw	251
   621  06A4  00FB               	movwf	??_main
   622  06A5                     u557:	
   623  06A5  0BFB               	decfsz	??_main,f
   624  06A6  2EA5               	goto	u557
   625  06A7  0BFC               	decfsz	??_main+1,f
   626  06A8  2EA5               	goto	u557
   627  06A9  2EAA               	nop2
   628                           
   629                           ;MasterMain.c: 58:                     bandera_enviar = 1;
   630  06AA  1283               	bcf	3,5	;RP0=0, select bank0
   631  06AB  1303               	bcf	3,6	;RP1=0, select bank0
   632  06AC  01B4               	clrf	_bandera_enviar
   633  06AD  0AB4               	incf	_bandera_enviar,f
   634  06AE                     l1002:	
   635                           
   636                           ;MasterMain.c: 60:                 if(BF){
   637  06AE  1683               	bsf	3,5	;RP0=1, select bank1
   638  06AF  1303               	bcf	3,6	;RP1=0, select bank1
   639  06B0  1C14               	btfss	20,0	;volatile
   640  06B1  2EF2               	goto	l984
   641                           
   642                           ;MasterMain.c: 61:                     recibido_pot1 = SSPBUF;
   643  06B2  1283               	bcf	3,5	;RP0=0, select bank0
   644  06B3  1303               	bcf	3,6	;RP1=0, select bank0
   645  06B4  0813               	movf	19,w	;volatile
   646  06B5  00FB               	movwf	??_main
   647  06B6  087B               	movf	??_main,w
   648  06B7  00B6               	movwf	_recibido_pot1
   649                           
   650                           ;MasterMain.c: 62:                     if (recibido_pot1 == 10){
   651  06B8  300A               	movlw	10
   652  06B9  0636               	xorwf	_recibido_pot1,w
   653  06BA  1D03               	btfss	3,2
   654  06BB  2EC0               	goto	l43
   655                           
   656                           ;MasterMain.c: 63:                         recibido_pot1 = 9;
   657  06BC  3009               	movlw	9
   658  06BD  00FB               	movwf	??_main
   659  06BE  087B               	movf	??_main,w
   660  06BF  00B6               	movwf	_recibido_pot1
   661  06C0                     l43:	
   662                           ;MasterMain.c: 64:                     }
   663                           
   664                           
   665                           ;MasterMain.c: 65:                     order = 66;
   666  06C0  3042               	movlw	66
   667  06C1                     L1:	
   668  06C1  00FB               	movwf	??_main
   669  06C2  087B               	movf	??_main,w
   670  06C3  00B7               	movwf	_order
   671                           
   672                           ;MasterMain.c: 66:                     bandera_enviar = 0;
   673  06C4  01B4               	clrf	_bandera_enviar
   674  06C5  2EF2               	goto	l984
   675  06C6                     l1012:	
   676                           
   677                           ;MasterMain.c: 70:                 if(!bandera_enviar){
   678  06C6  0834               	movf	_bandera_enviar,w
   679  06C7  1D03               	btfss	3,2
   680  06C8  2EDC               	goto	l1020
   681                           
   682                           ;MasterMain.c: 71:                     SPI_write(order);
   683  06C9  0837               	movf	_order,w
   684  06CA  120A  118A  25CA  120A  118A  	fcall	_SPI_write
   685                           
   686                           ;MasterMain.c: 72:                     _delay((unsigned long)((10)*(4000000/4000.0)));
   687  06CF  300D               	movlw	13
   688  06D0  00FC               	movwf	??_main+1
   689  06D1  30FB               	movlw	251
   690  06D2  00FB               	movwf	??_main
   691  06D3                     u567:	
   692  06D3  0BFB               	decfsz	??_main,f
   693  06D4  2ED3               	goto	u567
   694  06D5  0BFC               	decfsz	??_main+1,f
   695  06D6  2ED3               	goto	u567
   696  06D7  2ED8               	nop2
   697                           
   698                           ;MasterMain.c: 73:                     bandera_enviar = 1;
   699  06D8  1283               	bcf	3,5	;RP0=0, select bank0
   700  06D9  1303               	bcf	3,6	;RP1=0, select bank0
   701  06DA  01B4               	clrf	_bandera_enviar
   702  06DB  0AB4               	incf	_bandera_enviar,f
   703  06DC                     l1020:	
   704                           
   705                           ;MasterMain.c: 75:                 if(BF){
   706  06DC  1683               	bsf	3,5	;RP0=1, select bank1
   707  06DD  1303               	bcf	3,6	;RP1=0, select bank1
   708  06DE  1C14               	btfss	20,0	;volatile
   709  06DF  2EF2               	goto	l984
   710                           
   711                           ;MasterMain.c: 76:                     recibido_pot2 = SSPBUF;
   712  06E0  1283               	bcf	3,5	;RP0=0, select bank0
   713  06E1  1303               	bcf	3,6	;RP1=0, select bank0
   714  06E2  0813               	movf	19,w	;volatile
   715  06E3  00FB               	movwf	??_main
   716  06E4  087B               	movf	??_main,w
   717  06E5  00B5               	movwf	_recibido_pot2
   718                           
   719                           ;MasterMain.c: 77:                     if (recibido_pot2 == 10){
   720  06E6  300A               	movlw	10
   721  06E7  0635               	xorwf	_recibido_pot2,w
   722  06E8  1D03               	btfss	3,2
   723  06E9  2EEE               	goto	l48
   724                           
   725                           ;MasterMain.c: 78:                         recibido_pot2 = 9;
   726  06EA  3009               	movlw	9
   727  06EB  00FB               	movwf	??_main
   728  06EC  087B               	movf	??_main,w
   729  06ED  00B5               	movwf	_recibido_pot2
   730  06EE                     l48:	
   731                           ;MasterMain.c: 79:                     }
   732                           
   733                           
   734                           ;MasterMain.c: 80:                     order = 22;
   735  06EE  3016               	movlw	22
   736  06EF  2EC1               	goto	L1
   737  06F0                     l1030:	
   738                           
   739                           ;MasterMain.c: 85:                 recibido_pot1 = 0;
   740  06F0  01B6               	clrf	_recibido_pot1
   741                           
   742                           ;MasterMain.c: 86:                 recibido_pot2 = 0;
   743  06F1  01B5               	clrf	_recibido_pot2
   744  06F2                     l984:	
   745                           ;MasterMain.c: 87:         }
   746                           
   747                           
   748                           ;MasterMain.c: 43:         if(PIR1bits.RCIF == 1){
   749  06F2  1283               	bcf	3,5	;RP0=0, select bank0
   750  06F3  1303               	bcf	3,6	;RP1=0, select bank0
   751  06F4  1E8C               	btfss	12,5	;volatile
   752  06F5  2F07               	goto	l990
   753                           
   754                           ;MasterMain.c: 44:             _delay((unsigned long)((50)*(4000000/4000.0)));
   755  06F6  3041               	movlw	65
   756  06F7  00FC               	movwf	??_main+1
   757  06F8  30EE               	movlw	238
   758  06F9  00FB               	movwf	??_main
   759  06FA                     u547:	
   760  06FA  0BFB               	decfsz	??_main,f
   761  06FB  2EFA               	goto	u547
   762  06FC  0BFC               	decfsz	??_main+1,f
   763  06FD  2EFA               	goto	u547
   764  06FE  0000               	nop
   765                           
   766                           ;MasterMain.c: 45:             PORTB = uartRC_Read();
   767  06FF  120A  118A  25C6  120A  118A  	fcall	_uartRC_Read
   768  0704  1283               	bcf	3,5	;RP0=0, select bank0
   769  0705  1303               	bcf	3,6	;RP1=0, select bank0
   770  0706  0086               	movwf	6	;volatile
   771  0707                     l990:	
   772                           
   773                           ;MasterMain.c: 48:         uartTX_Write(recibido_pot1);
   774  0707  0836               	movf	_recibido_pot1,w
   775  0708  120A  118A  25D0  120A  118A  	fcall	_uartTX_Write
   776                           
   777                           ;MasterMain.c: 51:         uartTX_Write(recibido_pot2);
   778  070D  1283               	bcf	3,5	;RP0=0, select bank0
   779  070E  1303               	bcf	3,6	;RP1=0, select bank0
   780  070F  0835               	movf	_recibido_pot2,w
   781  0710  120A  118A  25D0  120A  118A  	fcall	_uartTX_Write
   782  0715  1283               	bcf	3,5	;RP0=0, select bank0
   783  0716  1303               	bcf	3,6	;RP1=0, select bank0
   784  0717  0837               	movf	_order,w
   785  0718  00FB               	movwf	??_main
   786  0719  01FC               	clrf	??_main+1
   787                           
   788                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   789                           ; Switch size 1, requested type "simple"
   790                           ; Number of cases is 1, Range of values is 0 to 0
   791                           ; switch strategies available:
   792                           ; Name         Instructions Cycles
   793                           ; simple_byte            4     3 (average)
   794                           ; direct_byte           11     8 (fixed)
   795                           ; jumptable            260     6 (fixed)
   796                           ;	Chosen strategy is simple_byte
   797  071A  087C               	movf	??_main+1,w
   798  071B  3A00               	xorlw	0	; case 0
   799  071C  1903               	skipnz
   800  071D  2F1F               	goto	l1078
   801  071E  2EF0               	goto	l1030
   802  071F                     l1078:	
   803                           
   804                           ; Switch size 1, requested type "simple"
   805                           ; Number of cases is 2, Range of values is 22 to 66
   806                           ; switch strategies available:
   807                           ; Name         Instructions Cycles
   808                           ; simple_byte            7     4 (average)
   809                           ; direct_byte          146    11 (fixed)
   810                           ; jumptable            263     9 (fixed)
   811                           ;	Chosen strategy is simple_byte
   812  071F  087B               	movf	??_main,w
   813  0720  3A16               	xorlw	22	; case 22
   814  0721  1903               	skipnz
   815  0722  2E98               	goto	l994
   816  0723  3A54               	xorlw	84	; case 66
   817  0724  1903               	skipnz
   818  0725  2EC6               	goto	l1012
   819  0726  2EF0               	goto	l1030
   820  0727  120A  118A  2800   	ljmp	start
   821  072A                     __end_of_main:	
   822                           
   823                           	psect	text1
   824  072A                     __ptext1:	
   825 ;; *************** function _uart_init *****************
   826 ;; Defined at:
   827 ;;		line 13 in file "UART.c"
   828 ;; Parameters:    Size  Location     Type
   829 ;;  baudrate        2    6[BANK0 ] unsigned int 
   830 ;; Auto vars:     Size  Location     Type
   831 ;;  n               2    9[COMMON] unsigned int 
   832 ;; Return value:  Size  Location     Type
   833 ;;                  1    wreg      unsigned char 
   834 ;; Registers used:
   835 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   836 ;; Tracked objects:
   837 ;;		On entry : 0/0
   838 ;;		On exit  : 0/0
   839 ;;		Unchanged: 0/0
   840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   841 ;;      Params:         0       2       0       0       0
   842 ;;      Locals:         2       0       0       0       0
   843 ;;      Temps:          0      12       0       0       0
   844 ;;      Totals:         2      14       0       0       0
   845 ;;Total ram usage:       16 bytes
   846 ;; Hardware stack levels used:    1
   847 ;; Hardware stack levels required when called:    1
   848 ;; This function calls:
   849 ;;		___aldiv
   850 ;; This function is called by:
   851 ;;		_main
   852 ;; This function uses a non-reentrant model
   853 ;;
   854                           
   855                           
   856                           ;psect for function _uart_init
   857  072A                     _uart_init:	
   858                           
   859                           ;UART.c: 14:     uint16_t n;;UART.c: 15:     n = (4000000 - baudrate*64)/(baudrate*64);
   860                           
   861                           ;incstack = 0
   862                           ; Regs used in _uart_init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   863  072A  1283               	bcf	3,5	;RP0=0, select bank0
   864  072B  1303               	bcf	3,6	;RP1=0, select bank0
   865  072C  0827               	movf	uart_init@baudrate+1,w
   866  072D  00A9               	movwf	??_uart_init+1
   867  072E  0826               	movf	uart_init@baudrate,w
   868  072F  00A8               	movwf	??_uart_init
   869  0730  3006               	movlw	6
   870  0731  00FF               	movwf	127
   871  0732                     u395:	
   872  0732  1003               	clrc
   873  0733  0DA8               	rlf	??_uart_init,f
   874  0734  0DA9               	rlf	??_uart_init+1,f
   875  0735  0BFF               	decfsz	127,f
   876  0736  2F32               	goto	u395
   877  0737  0828               	movf	??_uart_init,w
   878  0738  00F0               	movwf	___aldiv@divisor
   879  0739  0829               	movf	??_uart_init+1,w
   880  073A  00F1               	movwf	___aldiv@divisor+1
   881  073B  01F2               	clrf	___aldiv@divisor+2
   882  073C  01F3               	clrf	___aldiv@divisor+3
   883  073D  0827               	movf	uart_init@baudrate+1,w
   884  073E  00AB               	movwf	??_uart_init+3
   885  073F  0826               	movf	uart_init@baudrate,w
   886  0740  00AA               	movwf	??_uart_init+2
   887  0741  3006               	movlw	6
   888  0742  00FF               	movwf	127
   889  0743                     u405:	
   890  0743  1003               	clrc
   891  0744  0DAA               	rlf	??_uart_init+2,f
   892  0745  0DAB               	rlf	??_uart_init+3,f
   893  0746  0BFF               	decfsz	127,f
   894  0747  2F43               	goto	u405
   895  0748  082A               	movf	??_uart_init+2,w
   896  0749  00AC               	movwf	??_uart_init+4
   897  074A  082B               	movf	??_uart_init+3,w
   898  074B  00AD               	movwf	??_uart_init+5
   899  074C  01AE               	clrf	??_uart_init+6
   900  074D  01AF               	clrf	??_uart_init+7
   901  074E  3000               	movlw	0
   902  074F  00B0               	movwf	??_uart_init+8
   903  0750  3009               	movlw	9
   904  0751  00B1               	movwf	??_uart_init+9
   905  0752  303D               	movlw	61
   906  0753  00B2               	movwf	??_uart_init+10
   907  0754  3000               	movlw	0
   908  0755  00B3               	movwf	??_uart_init+11
   909  0756  082C               	movf	??_uart_init+4,w
   910  0757  02B0               	subwf	??_uart_init+8,f
   911  0758  082D               	movf	??_uart_init+5,w
   912  0759  1C03               	skipc
   913  075A  0F2D               	incfsz	??_uart_init+5,w
   914  075B  2F5D               	goto	u411
   915  075C  2F5E               	goto	u412
   916  075D                     u411:	
   917  075D  02B1               	subwf	??_uart_init+9,f
   918  075E                     u412:	
   919  075E  082E               	movf	??_uart_init+6,w
   920  075F  1C03               	skipc
   921  0760  0F2E               	incfsz	??_uart_init+6,w
   922  0761  2F63               	goto	u413
   923  0762  2F64               	goto	u414
   924  0763                     u413:	
   925  0763  02B2               	subwf	??_uart_init+10,f
   926  0764                     u414:	
   927  0764  082F               	movf	??_uart_init+7,w
   928  0765  1C03               	skipc
   929  0766  0F2F               	incfsz	??_uart_init+7,w
   930  0767  2F69               	goto	u415
   931  0768  2F6A               	goto	u416
   932  0769                     u415:	
   933  0769  02B3               	subwf	??_uart_init+11,f
   934  076A                     u416:	
   935  076A  0833               	movf	??_uart_init+11,w
   936  076B  00F7               	movwf	___aldiv@dividend+3
   937  076C  0832               	movf	??_uart_init+10,w
   938  076D  00F6               	movwf	___aldiv@dividend+2
   939  076E  0831               	movf	??_uart_init+9,w
   940  076F  00F5               	movwf	___aldiv@dividend+1
   941  0770  0830               	movf	??_uart_init+8,w
   942  0771  00F4               	movwf	___aldiv@dividend
   943  0772  120A  118A  25EE  120A  118A  	fcall	___aldiv
   944  0777  0871               	movf	?___aldiv+1,w
   945  0778  00FA               	movwf	uart_init@n+1
   946  0779  0870               	movf	?___aldiv,w
   947  077A  00F9               	movwf	uart_init@n
   948                           
   949                           ;UART.c: 16:     if (n > 255){
   950  077B  3001               	movlw	1
   951  077C  027A               	subwf	uart_init@n+1,w
   952  077D  3000               	movlw	0
   953  077E  1903               	skipnz
   954  077F  0279               	subwf	uart_init@n,w
   955  0780  1C03               	skipc
   956  0781  2FDA               	goto	l952
   957                           
   958                           ;UART.c: 17:         n = (4000000 - baudrate*16)/(baudrate*16);
   959  0782  1283               	bcf	3,5	;RP0=0, select bank0
   960  0783  1303               	bcf	3,6	;RP1=0, select bank0
   961  0784  0827               	movf	uart_init@baudrate+1,w
   962  0785  00A9               	movwf	??_uart_init+1
   963  0786  0826               	movf	uart_init@baudrate,w
   964  0787  00A8               	movwf	??_uart_init
   965  0788  0EA8               	swapf	??_uart_init,f
   966  0789  0EA9               	swapf	??_uart_init+1,f
   967  078A  30F0               	movlw	240
   968  078B  05A9               	andwf	??_uart_init+1,f
   969  078C  0828               	movf	??_uart_init,w
   970  078D  390F               	andlw	15
   971  078E  04A9               	iorwf	??_uart_init+1,f
   972  078F  30F0               	movlw	240
   973  0790  05A8               	andwf	??_uart_init,f
   974  0791  0828               	movf	??_uart_init,w
   975  0792  00F0               	movwf	___aldiv@divisor
   976  0793  0829               	movf	??_uart_init+1,w
   977  0794  00F1               	movwf	___aldiv@divisor+1
   978  0795  01F2               	clrf	___aldiv@divisor+2
   979  0796  01F3               	clrf	___aldiv@divisor+3
   980  0797  0827               	movf	uart_init@baudrate+1,w
   981  0798  00AB               	movwf	??_uart_init+3
   982  0799  0826               	movf	uart_init@baudrate,w
   983  079A  00AA               	movwf	??_uart_init+2
   984  079B  0EAA               	swapf	??_uart_init+2,f
   985  079C  0EAB               	swapf	??_uart_init+3,f
   986  079D  30F0               	movlw	240
   987  079E  05AB               	andwf	??_uart_init+3,f
   988  079F  082A               	movf	??_uart_init+2,w
   989  07A0  390F               	andlw	15
   990  07A1  04AB               	iorwf	??_uart_init+3,f
   991  07A2  30F0               	movlw	240
   992  07A3  05AA               	andwf	??_uart_init+2,f
   993  07A4  082A               	movf	??_uart_init+2,w
   994  07A5  00AC               	movwf	??_uart_init+4
   995  07A6  082B               	movf	??_uart_init+3,w
   996  07A7  00AD               	movwf	??_uart_init+5
   997  07A8  01AE               	clrf	??_uart_init+6
   998  07A9  01AF               	clrf	??_uart_init+7
   999  07AA  3000               	movlw	0
  1000  07AB  00B0               	movwf	??_uart_init+8
  1001  07AC  3009               	movlw	9
  1002  07AD  00B1               	movwf	??_uart_init+9
  1003  07AE  303D               	movlw	61
  1004  07AF  00B2               	movwf	??_uart_init+10
  1005  07B0  3000               	movlw	0
  1006  07B1  00B3               	movwf	??_uart_init+11
  1007  07B2  082C               	movf	??_uart_init+4,w
  1008  07B3  02B0               	subwf	??_uart_init+8,f
  1009  07B4  082D               	movf	??_uart_init+5,w
  1010  07B5  1C03               	skipc
  1011  07B6  0F2D               	incfsz	??_uart_init+5,w
  1012  07B7  2FB9               	goto	u431
  1013  07B8  2FBA               	goto	u432
  1014  07B9                     u431:	
  1015  07B9  02B1               	subwf	??_uart_init+9,f
  1016  07BA                     u432:	
  1017  07BA  082E               	movf	??_uart_init+6,w
  1018  07BB  1C03               	skipc
  1019  07BC  0F2E               	incfsz	??_uart_init+6,w
  1020  07BD  2FBF               	goto	u433
  1021  07BE  2FC0               	goto	u434
  1022  07BF                     u433:	
  1023  07BF  02B2               	subwf	??_uart_init+10,f
  1024  07C0                     u434:	
  1025  07C0  082F               	movf	??_uart_init+7,w
  1026  07C1  1C03               	skipc
  1027  07C2  0F2F               	incfsz	??_uart_init+7,w
  1028  07C3  2FC5               	goto	u435
  1029  07C4  2FC6               	goto	u436
  1030  07C5                     u435:	
  1031  07C5  02B3               	subwf	??_uart_init+11,f
  1032  07C6                     u436:	
  1033  07C6  0833               	movf	??_uart_init+11,w
  1034  07C7  00F7               	movwf	___aldiv@dividend+3
  1035  07C8  0832               	movf	??_uart_init+10,w
  1036  07C9  00F6               	movwf	___aldiv@dividend+2
  1037  07CA  0831               	movf	??_uart_init+9,w
  1038  07CB  00F5               	movwf	___aldiv@dividend+1
  1039  07CC  0830               	movf	??_uart_init+8,w
  1040  07CD  00F4               	movwf	___aldiv@dividend
  1041  07CE  120A  118A  25EE  120A  118A  	fcall	___aldiv
  1042  07D3  0871               	movf	?___aldiv+1,w
  1043  07D4  00FA               	movwf	uart_init@n+1
  1044  07D5  0870               	movf	?___aldiv,w
  1045  07D6  00F9               	movwf	uart_init@n
  1046                           
  1047                           ;UART.c: 18:         TXSTAbits.BRGH = 1;
  1048  07D7  1683               	bsf	3,5	;RP0=1, select bank1
  1049  07D8  1303               	bcf	3,6	;RP1=0, select bank1
  1050  07D9  1518               	bsf	24,2	;volatile
  1051  07DA                     l952:	
  1052                           
  1053                           ;UART.c: 20:     if (n < 256){
  1054  07DA  3001               	movlw	1
  1055  07DB  027A               	subwf	uart_init@n+1,w
  1056  07DC  3000               	movlw	0
  1057  07DD  1903               	skipnz
  1058  07DE  0279               	subwf	uart_init@n,w
  1059  07DF  1803               	skipnc
  1060  07E0  0008               	return
  1061                           
  1062                           ;UART.c: 21:         SPBRG = n;
  1063  07E1  0879               	movf	uart_init@n,w
  1064  07E2  1683               	bsf	3,5	;RP0=1, select bank1
  1065  07E3  1303               	bcf	3,6	;RP1=0, select bank1
  1066  07E4  0099               	movwf	25	;volatile
  1067                           
  1068                           ;UART.c: 22:         TXSTAbits.SYNC = 0;
  1069  07E5  1218               	bcf	24,4	;volatile
  1070                           
  1071                           ;UART.c: 23:         RCSTAbits.SPEN = 1;
  1072  07E6  1283               	bcf	3,5	;RP0=0, select bank0
  1073  07E7  1303               	bcf	3,6	;RP1=0, select bank0
  1074  07E8  1798               	bsf	24,7	;volatile
  1075                           
  1076                           ;UART.c: 24:         TRISC7 = 1;
  1077  07E9  1683               	bsf	3,5	;RP0=1, select bank1
  1078  07EA  1303               	bcf	3,6	;RP1=0, select bank1
  1079  07EB  1787               	bsf	7,7	;volatile
  1080                           
  1081                           ;UART.c: 25:         TRISC6 = 0;
  1082  07EC  1307               	bcf	7,6	;volatile
  1083                           
  1084                           ;UART.c: 26:         RCSTAbits.CREN = 1;
  1085  07ED  1283               	bcf	3,5	;RP0=0, select bank0
  1086  07EE  1303               	bcf	3,6	;RP1=0, select bank0
  1087  07EF  1618               	bsf	24,4	;volatile
  1088                           
  1089                           ;UART.c: 27:         TXSTAbits.TXEN = 1;
  1090  07F0  1683               	bsf	3,5	;RP0=1, select bank1
  1091  07F1  1303               	bcf	3,6	;RP1=0, select bank1
  1092  07F2  1698               	bsf	24,5	;volatile
  1093  07F3  0008               	return
  1094  07F4                     __end_of_uart_init:	
  1095                           
  1096                           	psect	text2
  1097  05EE                     __ptext2:	
  1098 ;; *************** function ___aldiv *****************
  1099 ;; Defined at:
  1100 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\aldiv.c"
  1101 ;; Parameters:    Size  Location     Type
  1102 ;;  divisor         4    0[COMMON] long 
  1103 ;;  dividend        4    4[COMMON] long 
  1104 ;; Auto vars:     Size  Location     Type
  1105 ;;  quotient        4    2[BANK0 ] long 
  1106 ;;  sign            1    1[BANK0 ] unsigned char 
  1107 ;;  counter         1    0[BANK0 ] unsigned char 
  1108 ;; Return value:  Size  Location     Type
  1109 ;;                  4    0[COMMON] long 
  1110 ;; Registers used:
  1111 ;;		wreg, status,2, status,0
  1112 ;; Tracked objects:
  1113 ;;		On entry : 0/0
  1114 ;;		On exit  : 0/0
  1115 ;;		Unchanged: 0/0
  1116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1117 ;;      Params:         8       0       0       0       0
  1118 ;;      Locals:         0       6       0       0       0
  1119 ;;      Temps:          1       0       0       0       0
  1120 ;;      Totals:         9       6       0       0       0
  1121 ;;Total ram usage:       15 bytes
  1122 ;; Hardware stack levels used:    1
  1123 ;; This function calls:
  1124 ;;		Nothing
  1125 ;; This function is called by:
  1126 ;;		_uart_init
  1127 ;; This function uses a non-reentrant model
  1128 ;;
  1129                           
  1130                           
  1131                           ;psect for function ___aldiv
  1132  05EE                     ___aldiv:	
  1133                           
  1134                           ;incstack = 0
  1135                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  1136  05EE  1283               	bcf	3,5	;RP0=0, select bank0
  1137  05EF  1303               	bcf	3,6	;RP1=0, select bank0
  1138  05F0  01A1               	clrf	___aldiv@sign
  1139  05F1  1FF3               	btfss	___aldiv@divisor+3,7
  1140  05F2  2E00               	goto	l263
  1141  05F3  09F0               	comf	___aldiv@divisor,f
  1142  05F4  09F1               	comf	___aldiv@divisor+1,f
  1143  05F5  09F2               	comf	___aldiv@divisor+2,f
  1144  05F6  09F3               	comf	___aldiv@divisor+3,f
  1145  05F7  0AF0               	incf	___aldiv@divisor,f
  1146  05F8  1903               	skipnz
  1147  05F9  0AF1               	incf	___aldiv@divisor+1,f
  1148  05FA  1903               	skipnz
  1149  05FB  0AF2               	incf	___aldiv@divisor+2,f
  1150  05FC  1903               	skipnz
  1151  05FD  0AF3               	incf	___aldiv@divisor+3,f
  1152  05FE  01A1               	clrf	___aldiv@sign
  1153  05FF  0AA1               	incf	___aldiv@sign,f
  1154  0600                     l263:	
  1155  0600  1FF7               	btfss	___aldiv@dividend+3,7
  1156  0601  2E11               	goto	l904
  1157  0602  09F4               	comf	___aldiv@dividend,f
  1158  0603  09F5               	comf	___aldiv@dividend+1,f
  1159  0604  09F6               	comf	___aldiv@dividend+2,f
  1160  0605  09F7               	comf	___aldiv@dividend+3,f
  1161  0606  0AF4               	incf	___aldiv@dividend,f
  1162  0607  1903               	skipnz
  1163  0608  0AF5               	incf	___aldiv@dividend+1,f
  1164  0609  1903               	skipnz
  1165  060A  0AF6               	incf	___aldiv@dividend+2,f
  1166  060B  1903               	skipnz
  1167  060C  0AF7               	incf	___aldiv@dividend+3,f
  1168  060D  3001               	movlw	1
  1169  060E  00F8               	movwf	??___aldiv
  1170  060F  0878               	movf	??___aldiv,w
  1171  0610  06A1               	xorwf	___aldiv@sign,f
  1172  0611                     l904:	
  1173  0611  3000               	movlw	0
  1174  0612  00A5               	movwf	___aldiv@quotient+3
  1175  0613  3000               	movlw	0
  1176  0614  00A4               	movwf	___aldiv@quotient+2
  1177  0615  3000               	movlw	0
  1178  0616  00A3               	movwf	___aldiv@quotient+1
  1179  0617  3000               	movlw	0
  1180  0618  00A2               	movwf	___aldiv@quotient
  1181  0619  0873               	movf	___aldiv@divisor+3,w
  1182  061A  0472               	iorwf	___aldiv@divisor+2,w
  1183  061B  0471               	iorwf	___aldiv@divisor+1,w
  1184  061C  0470               	iorwf	___aldiv@divisor,w
  1185  061D  1903               	skipnz
  1186  061E  2E66               	goto	l926
  1187  061F  01A0               	clrf	___aldiv@counter
  1188  0620  0AA0               	incf	___aldiv@counter,f
  1189  0621                     l912:	
  1190  0621  1BF3               	btfsc	___aldiv@divisor+3,7
  1191  0622  2E31               	goto	l914
  1192  0623  3001               	movlw	1
  1193  0624  00F8               	movwf	??___aldiv
  1194  0625                     u315:	
  1195  0625  1003               	clrc
  1196  0626  0DF0               	rlf	___aldiv@divisor,f
  1197  0627  0DF1               	rlf	___aldiv@divisor+1,f
  1198  0628  0DF2               	rlf	___aldiv@divisor+2,f
  1199  0629  0DF3               	rlf	___aldiv@divisor+3,f
  1200  062A  0BF8               	decfsz	??___aldiv,f
  1201  062B  2E25               	goto	u315
  1202  062C  3001               	movlw	1
  1203  062D  00F8               	movwf	??___aldiv
  1204  062E  0878               	movf	??___aldiv,w
  1205  062F  07A0               	addwf	___aldiv@counter,f
  1206  0630  2E21               	goto	l912
  1207  0631                     l914:	
  1208  0631  3001               	movlw	1
  1209  0632  00F8               	movwf	??___aldiv
  1210  0633                     u335:	
  1211  0633  1003               	clrc
  1212  0634  0DA2               	rlf	___aldiv@quotient,f
  1213  0635  0DA3               	rlf	___aldiv@quotient+1,f
  1214  0636  0DA4               	rlf	___aldiv@quotient+2,f
  1215  0637  0DA5               	rlf	___aldiv@quotient+3,f
  1216  0638  0BF8               	decfsz	??___aldiv,f
  1217  0639  2E33               	goto	u335
  1218  063A  0873               	movf	___aldiv@divisor+3,w
  1219  063B  0277               	subwf	___aldiv@dividend+3,w
  1220  063C  1D03               	skipz
  1221  063D  2E48               	goto	u345
  1222  063E  0872               	movf	___aldiv@divisor+2,w
  1223  063F  0276               	subwf	___aldiv@dividend+2,w
  1224  0640  1D03               	skipz
  1225  0641  2E48               	goto	u345
  1226  0642  0871               	movf	___aldiv@divisor+1,w
  1227  0643  0275               	subwf	___aldiv@dividend+1,w
  1228  0644  1D03               	skipz
  1229  0645  2E48               	goto	u345
  1230  0646  0870               	movf	___aldiv@divisor,w
  1231  0647  0274               	subwf	___aldiv@dividend,w
  1232  0648                     u345:	
  1233  0648  1C03               	skipc
  1234  0649  2E59               	goto	l922
  1235  064A  0870               	movf	___aldiv@divisor,w
  1236  064B  02F4               	subwf	___aldiv@dividend,f
  1237  064C  0871               	movf	___aldiv@divisor+1,w
  1238  064D  1C03               	skipc
  1239  064E  0F71               	incfsz	___aldiv@divisor+1,w
  1240  064F  02F5               	subwf	___aldiv@dividend+1,f
  1241  0650  0872               	movf	___aldiv@divisor+2,w
  1242  0651  1C03               	skipc
  1243  0652  0F72               	incfsz	___aldiv@divisor+2,w
  1244  0653  02F6               	subwf	___aldiv@dividend+2,f
  1245  0654  0873               	movf	___aldiv@divisor+3,w
  1246  0655  1C03               	skipc
  1247  0656  0F73               	incfsz	___aldiv@divisor+3,w
  1248  0657  02F7               	subwf	___aldiv@dividend+3,f
  1249  0658  1422               	bsf	___aldiv@quotient,0
  1250  0659                     l922:	
  1251  0659  3001               	movlw	1
  1252  065A                     u355:	
  1253  065A  1003               	clrc
  1254  065B  0CF3               	rrf	___aldiv@divisor+3,f
  1255  065C  0CF2               	rrf	___aldiv@divisor+2,f
  1256  065D  0CF1               	rrf	___aldiv@divisor+1,f
  1257  065E  0CF0               	rrf	___aldiv@divisor,f
  1258  065F  3EFF               	addlw	-1
  1259  0660  1D03               	skipz
  1260  0661  2E5A               	goto	u355
  1261  0662  3001               	movlw	1
  1262  0663  02A0               	subwf	___aldiv@counter,f
  1263  0664  1D03               	btfss	3,2
  1264  0665  2E31               	goto	l914
  1265  0666                     l926:	
  1266  0666  0821               	movf	___aldiv@sign,w
  1267  0667  1903               	btfsc	3,2
  1268  0668  2E74               	goto	l930
  1269  0669  09A2               	comf	___aldiv@quotient,f
  1270  066A  09A3               	comf	___aldiv@quotient+1,f
  1271  066B  09A4               	comf	___aldiv@quotient+2,f
  1272  066C  09A5               	comf	___aldiv@quotient+3,f
  1273  066D  0AA2               	incf	___aldiv@quotient,f
  1274  066E  1903               	skipnz
  1275  066F  0AA3               	incf	___aldiv@quotient+1,f
  1276  0670  1903               	skipnz
  1277  0671  0AA4               	incf	___aldiv@quotient+2,f
  1278  0672  1903               	skipnz
  1279  0673  0AA5               	incf	___aldiv@quotient+3,f
  1280  0674                     l930:	
  1281  0674  0825               	movf	___aldiv@quotient+3,w
  1282  0675  00F3               	movwf	?___aldiv+3
  1283  0676  0824               	movf	___aldiv@quotient+2,w
  1284  0677  00F2               	movwf	?___aldiv+2
  1285  0678  0823               	movf	___aldiv@quotient+1,w
  1286  0679  00F1               	movwf	?___aldiv+1
  1287  067A  0822               	movf	___aldiv@quotient,w
  1288  067B  00F0               	movwf	?___aldiv
  1289  067C  0008               	return
  1290  067D                     __end_of___aldiv:	
  1291                           
  1292                           	psect	text3
  1293  05D0                     __ptext3:	
  1294 ;; *************** function _uartTX_Write *****************
  1295 ;; Defined at:
  1296 ;;		line 37 in file "UART.c"
  1297 ;; Parameters:    Size  Location     Type
  1298 ;;  dato            1    wreg     unsigned char 
  1299 ;; Auto vars:     Size  Location     Type
  1300 ;;  dato            1    0[COMMON] unsigned char 
  1301 ;; Return value:  Size  Location     Type
  1302 ;;                  1    wreg      void 
  1303 ;; Registers used:
  1304 ;;		wreg
  1305 ;; Tracked objects:
  1306 ;;		On entry : 0/0
  1307 ;;		On exit  : 0/0
  1308 ;;		Unchanged: 0/0
  1309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1310 ;;      Params:         0       0       0       0       0
  1311 ;;      Locals:         1       0       0       0       0
  1312 ;;      Temps:          0       0       0       0       0
  1313 ;;      Totals:         1       0       0       0       0
  1314 ;;Total ram usage:        1 bytes
  1315 ;; Hardware stack levels used:    1
  1316 ;; This function calls:
  1317 ;;		Nothing
  1318 ;; This function is called by:
  1319 ;;		_main
  1320 ;;		_uartTX_Write_Str
  1321 ;; This function uses a non-reentrant model
  1322 ;;
  1323                           
  1324                           
  1325                           ;psect for function _uartTX_Write
  1326  05D0                     _uartTX_Write:	
  1327                           
  1328                           ;incstack = 0
  1329                           ; Regs used in _uartTX_Write: [wreg]
  1330                           ;uartTX_Write@dato stored from wreg
  1331  05D0  00F0               	movwf	uartTX_Write@dato
  1332                           
  1333                           ;UART.c: 38:         TXREG = dato;
  1334  05D1  0870               	movf	uartTX_Write@dato,w
  1335  05D2  1283               	bcf	3,5	;RP0=0, select bank0
  1336  05D3  1303               	bcf	3,6	;RP1=0, select bank0
  1337  05D4  0099               	movwf	25	;volatile
  1338  05D5                     l77:	
  1339                           ;UART.c: 39:         while(!TXSTAbits.TRMT);
  1340                           
  1341  05D5  1683               	bsf	3,5	;RP0=1, select bank1
  1342  05D6  1303               	bcf	3,6	;RP1=0, select bank1
  1343  05D7  1898               	btfsc	24,1	;volatile
  1344  05D8  0008               	return
  1345  05D9  2DD5               	goto	l77
  1346  05DA                     __end_of_uartTX_Write:	
  1347                           
  1348                           	psect	text4
  1349  05C6                     __ptext4:	
  1350 ;; *************** function _uartRC_Read *****************
  1351 ;; Defined at:
  1352 ;;		line 33 in file "UART.c"
  1353 ;; Parameters:    Size  Location     Type
  1354 ;;		None
  1355 ;; Auto vars:     Size  Location     Type
  1356 ;;		None
  1357 ;; Return value:  Size  Location     Type
  1358 ;;                  1    wreg      unsigned char 
  1359 ;; Registers used:
  1360 ;;		wreg
  1361 ;; Tracked objects:
  1362 ;;		On entry : 0/0
  1363 ;;		On exit  : 0/0
  1364 ;;		Unchanged: 0/0
  1365 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1366 ;;      Params:         0       0       0       0       0
  1367 ;;      Locals:         0       0       0       0       0
  1368 ;;      Temps:          0       0       0       0       0
  1369 ;;      Totals:         0       0       0       0       0
  1370 ;;Total ram usage:        0 bytes
  1371 ;; Hardware stack levels used:    1
  1372 ;; This function calls:
  1373 ;;		Nothing
  1374 ;; This function is called by:
  1375 ;;		_main
  1376 ;; This function uses a non-reentrant model
  1377 ;;
  1378                           
  1379                           
  1380                           ;psect for function _uartRC_Read
  1381  05C6                     _uartRC_Read:	
  1382                           
  1383                           ;UART.c: 34:     return RCREG;
  1384                           
  1385                           ;incstack = 0
  1386                           ; Regs used in _uartRC_Read: [wreg]
  1387  05C6  1283               	bcf	3,5	;RP0=0, select bank0
  1388  05C7  1303               	bcf	3,6	;RP1=0, select bank0
  1389  05C8  081A               	movf	26,w	;volatile
  1390  05C9  0008               	return
  1391  05CA                     __end_of_uartRC_Read:	
  1392                           
  1393                           	psect	text5
  1394  05CA                     __ptext5:	
  1395 ;; *************** function _SPI_write *****************
  1396 ;; Defined at:
  1397 ;;		line 28 in file "SPI.c"
  1398 ;; Parameters:    Size  Location     Type
  1399 ;;  dato            1    wreg     unsigned char 
  1400 ;; Auto vars:     Size  Location     Type
  1401 ;;  dato            1    0[COMMON] unsigned char 
  1402 ;; Return value:  Size  Location     Type
  1403 ;;                  1    wreg      void 
  1404 ;; Registers used:
  1405 ;;		wreg
  1406 ;; Tracked objects:
  1407 ;;		On entry : 0/0
  1408 ;;		On exit  : 0/0
  1409 ;;		Unchanged: 0/0
  1410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1411 ;;      Params:         0       0       0       0       0
  1412 ;;      Locals:         1       0       0       0       0
  1413 ;;      Temps:          0       0       0       0       0
  1414 ;;      Totals:         1       0       0       0       0
  1415 ;;Total ram usage:        1 bytes
  1416 ;; Hardware stack levels used:    1
  1417 ;; This function calls:
  1418 ;;		Nothing
  1419 ;; This function is called by:
  1420 ;;		_main
  1421 ;; This function uses a non-reentrant model
  1422 ;;
  1423                           
  1424                           
  1425                           ;psect for function _SPI_write
  1426  05CA                     _SPI_write:	
  1427                           
  1428                           ;incstack = 0
  1429                           ; Regs used in _SPI_write: [wreg]
  1430                           ;SPI_write@dato stored from wreg
  1431  05CA  00F0               	movwf	SPI_write@dato
  1432                           
  1433                           ;SPI.c: 29:     SSPBUF = dato;
  1434  05CB  0870               	movf	SPI_write@dato,w
  1435  05CC  1283               	bcf	3,5	;RP0=0, select bank0
  1436  05CD  1303               	bcf	3,6	;RP1=0, select bank0
  1437  05CE  0093               	movwf	19	;volatile
  1438  05CF  0008               	return
  1439  05D0                     __end_of_SPI_write:	
  1440                           
  1441                           	psect	text6
  1442  05DA                     __ptext6:	
  1443 ;; *************** function _SPI_init *****************
  1444 ;; Defined at:
  1445 ;;		line 14 in file "SPI.c"
  1446 ;; Parameters:    Size  Location     Type
  1447 ;;  modo            1    wreg     enum E1292
  1448 ;;  muestra         1    0[COMMON] enum E1300
  1449 ;;  idle            1    1[COMMON] enum E1304
  1450 ;;  edge            1    2[COMMON] enum E1308
  1451 ;; Auto vars:     Size  Location     Type
  1452 ;;  modo            1    3[COMMON] enum E1292
  1453 ;; Return value:  Size  Location     Type
  1454 ;;                  1    wreg      void 
  1455 ;; Registers used:
  1456 ;;		wreg, status,2, status,0
  1457 ;; Tracked objects:
  1458 ;;		On entry : 0/0
  1459 ;;		On exit  : 0/0
  1460 ;;		Unchanged: 0/0
  1461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1462 ;;      Params:         3       0       0       0       0
  1463 ;;      Locals:         1       0       0       0       0
  1464 ;;      Temps:          0       0       0       0       0
  1465 ;;      Totals:         4       0       0       0       0
  1466 ;;Total ram usage:        4 bytes
  1467 ;; Hardware stack levels used:    1
  1468 ;; This function calls:
  1469 ;;		Nothing
  1470 ;; This function is called by:
  1471 ;;		_main
  1472 ;; This function uses a non-reentrant model
  1473 ;;
  1474                           
  1475                           
  1476                           ;psect for function _SPI_init
  1477  05DA                     _SPI_init:	
  1478                           
  1479                           ;incstack = 0
  1480                           ; Regs used in _SPI_init: [wreg+status,2+status,0]
  1481                           ;SPI_init@modo stored from wreg
  1482  05DA  00F3               	movwf	SPI_init@modo
  1483                           
  1484                           ;SPI.c: 14: void SPI_init(spi_modo modo, spi_sample muestra, spi_clk_idle idle,;SPI.c: 1
      +                          5:               spi_transmit_edge edge){;SPI.c: 16:     TRISC5 = 0;
  1485  05DB  1683               	bsf	3,5	;RP0=1, select bank1
  1486  05DC  1303               	bcf	3,6	;RP1=0, select bank1
  1487  05DD  1287               	bcf	7,5	;volatile
  1488                           
  1489                           ;SPI.c: 17:     if (modo & 0x04){
  1490  05DE  1D73               	btfss	SPI_init@modo,2
  1491  05DF  2DE4               	goto	l940
  1492                           
  1493                           ;SPI.c: 18:         SSPSTAT = edge;
  1494  05E0  0872               	movf	SPI_init@edge,w
  1495  05E1  0094               	movwf	20	;volatile
  1496                           
  1497                           ;SPI.c: 19:         TRISC3 = 1;
  1498  05E2  1587               	bsf	7,3	;volatile
  1499                           
  1500                           ;SPI.c: 20:     }
  1501  05E3  2DE8               	goto	l102
  1502  05E4                     l940:	
  1503                           
  1504                           ;SPI.c: 22:         SSPSTAT = muestra | edge;
  1505  05E4  0870               	movf	SPI_init@muestra,w
  1506  05E5  0472               	iorwf	SPI_init@edge,w
  1507  05E6  0094               	movwf	20	;volatile
  1508                           
  1509                           ;SPI.c: 23:         TRISC3 = 0;
  1510  05E7  1187               	bcf	7,3	;volatile
  1511  05E8                     l102:	
  1512                           ;SPI.c: 24:     }
  1513                           
  1514                           
  1515                           ;SPI.c: 25:     SSPCON = modo | idle;
  1516  05E8  0873               	movf	SPI_init@modo,w
  1517  05E9  0471               	iorwf	SPI_init@idle,w
  1518  05EA  1283               	bcf	3,5	;RP0=0, select bank0
  1519  05EB  1303               	bcf	3,6	;RP1=0, select bank0
  1520  05EC  0094               	movwf	20	;volatile
  1521  05ED  0008               	return
  1522  05EE                     __end_of_SPI_init:	
  1523  007E                     btemp	set	126	;btemp
  1524  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        1
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     20      24
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_uart_init
    _uart_init->___aldiv

Critical Paths under _main in BANK0

    _main->_uart_init
    _uart_init->___aldiv

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    1240
                                             11 COMMON     2     2      0
                           _SPI_init
                          _SPI_write
                        _uartRC_Read
                       _uartTX_Write
                          _uart_init
 ---------------------------------------------------------------------------------
 (1) _uart_init                                           16    14      2     836
                                              9 COMMON     2     2      0
                                              6 BANK0     14    12      2
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     604
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _uartTX_Write                                         1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _uartRC_Read                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SPI_write                                            1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SPI_init                                             4     1      3     360
                                              0 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SPI_init
   _SPI_write
   _uartRC_Read
   _uartTX_Write
   _uart_init
     ___aldiv

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     14      18       5       30.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      D       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      26      12        0.0%
ABS                  0      0      26       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Mon Feb 17 13:50:59 2020

             __CFG_CP$OFF 0000               _SSPSTATbits 0094                        _BF 04A0  
                      l43 06C0                        l48 06EE                        l77 05D5  
                     l102 05E8                       l263 0600                       l912 0621  
                     l904 0611                       l930 0674                       l922 0659  
                     l914 0631                       l940 05E4                       l926 0666  
                     l952 07DA                       l990 0707                       l984 06F2  
                     l994 0698                       u315 0625                       u411 075D  
                     u412 075E                       u413 0763                       u405 0743  
                     u414 0764                       u335 0633                       u431 07B9  
                     u415 0769                       u432 07BA                       u416 076A  
                     u345 0648                       u433 07BF                       u434 07C0  
            __CFG_CPD$OFF 0000                       u355 065A                       u435 07C5  
                     u436 07C6                       u395 0732                       u547 06FA  
                     u557 06A5                       u567 06D3              __CFG_LVP$OFF 0000  
                    l1002 06AE                      l1020 06DC                      l1012 06C6  
                    l1030 06F0                      l1078 071F              __CFG_WRT$OFF 0000  
                    _main 067D                      btemp 007E                      start 0000  
           __CFG_IESO$OFF 0000           __end_of___aldiv 067D                     ?_main 0070  
           __CFG_WDTE$OFF 0000                     _RCREG 001A                     _SPBRG 0099  
                   _PORTB 0006                     _TRISB 0086                     _TXREG 0019  
          __CFG_FCMEN$OFF 0000                     _order 0037           SPI_init@muestra 0070  
          __CFG_BOREN$OFF 0000          __end_of_SPI_init 05EE                     status 0003  
                   wtemp0 007E        __size_of_SPI_write 0006            __CFG_MCLRE$OFF 0000  
         __initialization 07F4              __end_of_main 072A                    ??_main 007B  
            ?_uartRC_Read 0070                    _TRISC3 043B                    _TRISC5 043D  
                  _TRISC6 043E                    _TRISC7 043F                    _SSPBUF 0013  
                  _SSPCON 0014            __CFG_PWRTE$OFF 0000                 ??___aldiv 0078  
       __end_of_SPI_write 05D0   __end_of__initialization 07FC              SPI_init@edge 0072  
            SPI_init@idle 0071              SPI_init@modo 0073            __pcstackCOMMON 0070  
            __pidataBANK0 05C5                 ?_SPI_init 0070                __pbssBANK0 0034  
              __pmaintext 067D                ??_SPI_init 0073        __size_of_uart_init 00CA  
                 _SSPSTAT 0094      __size_of_uartRC_Read 0004             ?_uartTX_Write 0070  
                 ___aldiv 05EE                   __ptext1 072A                   __ptext2 05EE  
                 __ptext3 05D0                   __ptext4 05C6                   __ptext5 05CA  
                 __ptext6 05DA             _recibido_pot1 0036             _recibido_pot2 0035  
        ___aldiv@dividend 0074      end_of_initialization 07FC            ??_uartTX_Write 0070  
       __end_of_uart_init 07F4                 _RCSTAbits 0018          ___aldiv@quotient 0022  
               _SPI_write 05CA                 _TXSTAbits 0098       start_initialization 07F4  
       __size_of_SPI_init 0014                ?_SPI_write 0070  __CFG_FOSC$INTRC_NOCLKOUT 0000  
             __pdataBANK0 0037      __end_of_uartTX_Write 05DA               __pbssCOMMON 007D  
               ___latbits 0002             __pcstackBANK0 0020             SPI_write@dato 0070  
                ?___aldiv 0070               ??_SPI_write 0070             ??_uartRC_Read 0070  
         ___aldiv@divisor 0070           ___aldiv@counter 0020                  _PIR1bits 000C  
               _uart_init 072A            _bandera_enviar 0034                uart_init@n 0079  
                _SPI_init 05DA       __end_of_uartRC_Read 05CA                ?_uart_init 0026  
        __size_of___aldiv 008F     __size_of_uartTX_Write 000A          uartTX_Write@dato 0070  
       __CFG_BOR4V$BOR40V 0000             __size_of_main 00AD              _uartTX_Write 05D0  
             _uartRC_Read 05C6         uart_init@baudrate 0026               ??_uart_init 0028  
             _valorSerial 007D              ___aldiv@sign 0021  
