

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Wed Feb 12 16:17:49 2020

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	intentry,global,class=CODE,delta=2
    14                           	dabs	1,0x7E,2
    15  0000                     
    16                           ; Version 2.05
    17                           ; Generated 20/12/2018 GMT
    18                           ; 
    19                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    20                           ; All rights reserved.
    21                           ; 
    22                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    23                           ; 
    24                           ; Redistribution and use in source and binary forms, with or without modification, are
    25                           ; permitted provided that the following conditions are met:
    26                           ; 
    27                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    28                           ;        conditions and the following disclaimer.
    29                           ; 
    30                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    31                           ;        of conditions and the following disclaimer in the documentation and/or other
    32                           ;        materials provided with the distribution.
    33                           ; 
    34                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    35                           ;        software without specific prior written permission.
    36                           ; 
    37                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    38                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    39                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    40                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    41                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    42                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    43                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    44                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    45                           ; 
    46                           ; 
    47                           ; Code-generator required, PIC16F887 Definitions
    48                           ; 
    49                           ; SFR Addresses
    50  0000                     	;# 
    51  0001                     	;# 
    52  0002                     	;# 
    53  0003                     	;# 
    54  0004                     	;# 
    55  0005                     	;# 
    56  0006                     	;# 
    57  0007                     	;# 
    58  0008                     	;# 
    59  0009                     	;# 
    60  000A                     	;# 
    61  000B                     	;# 
    62  000C                     	;# 
    63  000D                     	;# 
    64  000E                     	;# 
    65  000E                     	;# 
    66  000F                     	;# 
    67  0010                     	;# 
    68  0011                     	;# 
    69  0012                     	;# 
    70  0013                     	;# 
    71  0014                     	;# 
    72  0015                     	;# 
    73  0015                     	;# 
    74  0016                     	;# 
    75  0017                     	;# 
    76  0018                     	;# 
    77  0019                     	;# 
    78  001A                     	;# 
    79  001B                     	;# 
    80  001B                     	;# 
    81  001C                     	;# 
    82  001D                     	;# 
    83  001E                     	;# 
    84  001F                     	;# 
    85  0081                     	;# 
    86  0085                     	;# 
    87  0086                     	;# 
    88  0087                     	;# 
    89  0088                     	;# 
    90  0089                     	;# 
    91  008C                     	;# 
    92  008D                     	;# 
    93  008E                     	;# 
    94  008F                     	;# 
    95  0090                     	;# 
    96  0091                     	;# 
    97  0092                     	;# 
    98  0093                     	;# 
    99  0093                     	;# 
   100  0093                     	;# 
   101  0094                     	;# 
   102  0095                     	;# 
   103  0096                     	;# 
   104  0097                     	;# 
   105  0098                     	;# 
   106  0099                     	;# 
   107  009A                     	;# 
   108  009B                     	;# 
   109  009C                     	;# 
   110  009D                     	;# 
   111  009E                     	;# 
   112  009F                     	;# 
   113  0105                     	;# 
   114  0107                     	;# 
   115  0108                     	;# 
   116  0109                     	;# 
   117  010C                     	;# 
   118  010C                     	;# 
   119  010D                     	;# 
   120  010E                     	;# 
   121  010F                     	;# 
   122  0185                     	;# 
   123  0187                     	;# 
   124  0188                     	;# 
   125  0189                     	;# 
   126  018C                     	;# 
   127  018D                     	;# 
   128  0000                     	;# 
   129  0001                     	;# 
   130  0002                     	;# 
   131  0003                     	;# 
   132  0004                     	;# 
   133  0005                     	;# 
   134  0006                     	;# 
   135  0007                     	;# 
   136  0008                     	;# 
   137  0009                     	;# 
   138  000A                     	;# 
   139  000B                     	;# 
   140  000C                     	;# 
   141  000D                     	;# 
   142  000E                     	;# 
   143  000E                     	;# 
   144  000F                     	;# 
   145  0010                     	;# 
   146  0011                     	;# 
   147  0012                     	;# 
   148  0013                     	;# 
   149  0014                     	;# 
   150  0015                     	;# 
   151  0015                     	;# 
   152  0016                     	;# 
   153  0017                     	;# 
   154  0018                     	;# 
   155  0019                     	;# 
   156  001A                     	;# 
   157  001B                     	;# 
   158  001B                     	;# 
   159  001C                     	;# 
   160  001D                     	;# 
   161  001E                     	;# 
   162  001F                     	;# 
   163  0081                     	;# 
   164  0085                     	;# 
   165  0086                     	;# 
   166  0087                     	;# 
   167  0088                     	;# 
   168  0089                     	;# 
   169  008C                     	;# 
   170  008D                     	;# 
   171  008E                     	;# 
   172  008F                     	;# 
   173  0090                     	;# 
   174  0091                     	;# 
   175  0092                     	;# 
   176  0093                     	;# 
   177  0093                     	;# 
   178  0093                     	;# 
   179  0094                     	;# 
   180  0095                     	;# 
   181  0096                     	;# 
   182  0097                     	;# 
   183  0098                     	;# 
   184  0099                     	;# 
   185  009A                     	;# 
   186  009B                     	;# 
   187  009C                     	;# 
   188  009D                     	;# 
   189  009E                     	;# 
   190  009F                     	;# 
   191  0105                     	;# 
   192  0107                     	;# 
   193  0108                     	;# 
   194  0109                     	;# 
   195  010C                     	;# 
   196  010C                     	;# 
   197  010D                     	;# 
   198  010E                     	;# 
   199  010F                     	;# 
   200  0185                     	;# 
   201  0187                     	;# 
   202  0188                     	;# 
   203  0189                     	;# 
   204  018C                     	;# 
   205  018D                     	;# 
   206  0000                     	;# 
   207  0001                     	;# 
   208  0002                     	;# 
   209  0003                     	;# 
   210  0004                     	;# 
   211  0005                     	;# 
   212  0006                     	;# 
   213  0007                     	;# 
   214  0008                     	;# 
   215  0009                     	;# 
   216  000A                     	;# 
   217  000B                     	;# 
   218  000C                     	;# 
   219  000D                     	;# 
   220  000E                     	;# 
   221  000E                     	;# 
   222  000F                     	;# 
   223  0010                     	;# 
   224  0011                     	;# 
   225  0012                     	;# 
   226  0013                     	;# 
   227  0014                     	;# 
   228  0015                     	;# 
   229  0015                     	;# 
   230  0016                     	;# 
   231  0017                     	;# 
   232  0018                     	;# 
   233  0019                     	;# 
   234  001A                     	;# 
   235  001B                     	;# 
   236  001B                     	;# 
   237  001C                     	;# 
   238  001D                     	;# 
   239  001E                     	;# 
   240  001F                     	;# 
   241  0081                     	;# 
   242  0085                     	;# 
   243  0086                     	;# 
   244  0087                     	;# 
   245  0088                     	;# 
   246  0089                     	;# 
   247  008C                     	;# 
   248  008D                     	;# 
   249  008E                     	;# 
   250  008F                     	;# 
   251  0090                     	;# 
   252  0091                     	;# 
   253  0092                     	;# 
   254  0093                     	;# 
   255  0093                     	;# 
   256  0093                     	;# 
   257  0094                     	;# 
   258  0095                     	;# 
   259  0096                     	;# 
   260  0097                     	;# 
   261  0098                     	;# 
   262  0099                     	;# 
   263  009A                     	;# 
   264  009B                     	;# 
   265  009C                     	;# 
   266  009D                     	;# 
   267  009E                     	;# 
   268  009F                     	;# 
   269  0105                     	;# 
   270  0107                     	;# 
   271  0108                     	;# 
   272  0109                     	;# 
   273  010C                     	;# 
   274  010C                     	;# 
   275  010D                     	;# 
   276  010E                     	;# 
   277  010F                     	;# 
   278  0185                     	;# 
   279  0187                     	;# 
   280  0188                     	;# 
   281  0189                     	;# 
   282  018C                     	;# 
   283  018D                     	;# 
   284  0000                     	;# 
   285  0001                     	;# 
   286  0002                     	;# 
   287  0003                     	;# 
   288  0004                     	;# 
   289  0005                     	;# 
   290  0006                     	;# 
   291  0007                     	;# 
   292  0008                     	;# 
   293  0009                     	;# 
   294  000A                     	;# 
   295  000B                     	;# 
   296  000C                     	;# 
   297  000D                     	;# 
   298  000E                     	;# 
   299  000E                     	;# 
   300  000F                     	;# 
   301  0010                     	;# 
   302  0011                     	;# 
   303  0012                     	;# 
   304  0013                     	;# 
   305  0014                     	;# 
   306  0015                     	;# 
   307  0015                     	;# 
   308  0016                     	;# 
   309  0017                     	;# 
   310  0018                     	;# 
   311  0019                     	;# 
   312  001A                     	;# 
   313  001B                     	;# 
   314  001B                     	;# 
   315  001C                     	;# 
   316  001D                     	;# 
   317  001E                     	;# 
   318  001F                     	;# 
   319  0081                     	;# 
   320  0085                     	;# 
   321  0086                     	;# 
   322  0087                     	;# 
   323  0088                     	;# 
   324  0089                     	;# 
   325  008C                     	;# 
   326  008D                     	;# 
   327  008E                     	;# 
   328  008F                     	;# 
   329  0090                     	;# 
   330  0091                     	;# 
   331  0092                     	;# 
   332  0093                     	;# 
   333  0093                     	;# 
   334  0093                     	;# 
   335  0094                     	;# 
   336  0095                     	;# 
   337  0096                     	;# 
   338  0097                     	;# 
   339  0098                     	;# 
   340  0099                     	;# 
   341  009A                     	;# 
   342  009B                     	;# 
   343  009C                     	;# 
   344  009D                     	;# 
   345  009E                     	;# 
   346  009F                     	;# 
   347  0105                     	;# 
   348  0107                     	;# 
   349  0108                     	;# 
   350  0109                     	;# 
   351  010C                     	;# 
   352  010C                     	;# 
   353  010D                     	;# 
   354  010E                     	;# 
   355  010F                     	;# 
   356  0185                     	;# 
   357  0187                     	;# 
   358  0188                     	;# 
   359  0189                     	;# 
   360  018C                     	;# 
   361  018D                     	;# 
   362  0013                     _SSPBUF	set	19
   363  0014                     _SSPCON	set	20
   364  001E                     _ADRESH	set	30
   365  000B                     _INTCONbits	set	11
   366  000C                     _PIR1bits	set	12
   367  001F                     _ADCON0bits	set	31
   368  0066                     _ADIF	set	102
   369  0094                     _SSPSTATbits	set	148
   370  0094                     _SSPSTAT	set	148
   371  009E                     _ADRESL	set	158
   372  0089                     _TRISEbits	set	137
   373  0085                     _TRISAbits	set	133
   374  009F                     _ADCON1bits	set	159
   375  008C                     _PIE1bits	set	140
   376  043B                     _TRISC3	set	1083
   377  043D                     _TRISC5	set	1085
   378  0466                     _ADIE	set	1126
   379  0188                     _ANSELbits	set	392
   380                           
   381                           ; #config settings
   382  0000                     
   383                           	psect	cinit
   384  000F                     start_initialization:	
   385  000F                     __initialization:	
   386                           
   387                           ; Clear objects allocated to COMMON
   388  000F  01F7               	clrf	__pbssCOMMON& (0+127)
   389  0010  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
   390  0011  01F9               	clrf	(__pbssCOMMON+2)& (0+127)
   391  0012  01FA               	clrf	(__pbssCOMMON+3)& (0+127)
   392  0013                     end_of_initialization:	
   393                           ;End of C runtime variable initialization code
   394                           
   395  0013                     __end_of__initialization:	
   396  0013  0183               	clrf	3
   397  0014  120A  118A  296C   	ljmp	_main	;jump to C main() function
   398                           
   399                           	psect	bssCOMMON
   400  0077                     __pbssCOMMON:	
   401  0077                     _instruccion:	
   402  0077                     	ds	1
   403  0078                     _valorADC_CH0:	
   404  0078                     	ds	1
   405  0079                     _valorADC_CH5:	
   406  0079                     	ds	1
   407  007A                     _banderaADC:	
   408  007A                     	ds	1
   409                           
   410                           	psect	cstackCOMMON
   411  0070                     __pcstackCOMMON:	
   412  0070                     ?_AnalogRead_8:	
   413  0070                     ?_ADC_CHselect:	
   414                           ; 1 bytes @ 0x0
   415                           
   416  0070                     ?_ISR:	
   417                           ; 1 bytes @ 0x0
   418                           
   419  0070                     ??_ISR:	
   420                           ; 1 bytes @ 0x0
   421                           
   422  0070                     ?_main:	
   423                           ; 1 bytes @ 0x0
   424                           
   425                           
   426                           ; 1 bytes @ 0x0
   427  0070                     	ds	2
   428  0072                     ?_ADConfig:	
   429  0072                     ??_AnalogRead_8:	
   430                           ; 1 bytes @ 0x2
   431                           
   432  0072                     ??_ADC_CHselect:	
   433                           ; 1 bytes @ 0x2
   434                           
   435  0072                     ADConfig@canal:	
   436                           ; 1 bytes @ 0x2
   437                           
   438                           
   439                           ; 1 bytes @ 0x2
   440  0072                     	ds	1
   441  0073                     ADConfig@justificado:	
   442                           
   443                           ; 1 bytes @ 0x3
   444  0073                     	ds	1
   445  0074                     ??_ADConfig:	
   446  0074                     AnalogRead_8@just:	
   447                           ; 1 bytes @ 0x4
   448                           
   449  0074                     ADC_CHselect@canal:	
   450                           ; 1 bytes @ 0x4
   451                           
   452                           
   453                           ; 1 bytes @ 0x4
   454  0074                     	ds	1
   455  0075                     AnalogRead_8@conversion:	
   456                           
   457                           ; 1 bytes @ 0x5
   458  0075                     	ds	1
   459  0076                     ADConfig@oscFreq:	
   460                           
   461                           ; 1 bytes @ 0x6
   462  0076                     	ds	1
   463                           
   464                           	psect	cstackBANK0
   465  0020                     __pcstackBANK0:	
   466  0020                     ??_main:	
   467                           
   468                           ; 1 bytes @ 0x0
   469  0020                     	ds	3
   470                           
   471                           	psect	maintext
   472  016C                     __pmaintext:	
   473 ;;
   474 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   475 ;;
   476 ;; *************** function _main *****************
   477 ;; Defined at:
   478 ;;		line 37 in file "SlaveMain.c"
   479 ;; Parameters:    Size  Location     Type
   480 ;;		None
   481 ;; Auto vars:     Size  Location     Type
   482 ;;		None
   483 ;; Return value:  Size  Location     Type
   484 ;;                  1    wreg      void 
   485 ;; Registers used:
   486 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   487 ;; Tracked objects:
   488 ;;		On entry : B00/0
   489 ;;		On exit  : 0/0
   490 ;;		Unchanged: 0/0
   491 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   492 ;;      Params:         0       0       0       0       0
   493 ;;      Locals:         0       0       0       0       0
   494 ;;      Temps:          0       3       0       0       0
   495 ;;      Totals:         0       3       0       0       0
   496 ;;Total ram usage:        3 bytes
   497 ;; Hardware stack levels required when called:    2
   498 ;; This function calls:
   499 ;;		_ADC_CHselect
   500 ;;		_ADConfig
   501 ;;		_AnalogRead_8
   502 ;; This function is called by:
   503 ;;		Startup code after reset
   504 ;; This function uses a non-reentrant model
   505 ;;
   506                           
   507                           
   508                           ;psect for function _main
   509  016C                     _main:	
   510                           
   511                           ;SlaveMain.c: 38:     ADConfig(4,0,'H');
   512                           
   513                           ;incstack = 0
   514                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   515  016C  01F2               	clrf	ADConfig@canal
   516  016D  3048               	movlw	72
   517  016E  1283               	bcf	3,5	;RP0=0, select bank0
   518  016F  1303               	bcf	3,6	;RP1=0, select bank0
   519  0170  00A0               	movwf	??_main
   520  0171  0820               	movf	??_main,w
   521  0172  00F3               	movwf	ADConfig@justificado
   522  0173  3004               	movlw	4
   523  0174  120A  118A  2017  120A  118A  	fcall	_ADConfig
   524  0179                     l1231:	
   525                           
   526                           ;SlaveMain.c: 42:         if (banderaADC){
   527  0179  087A               	movf	_banderaADC,w
   528  017A  1D03               	btfss	3,2
   529  017B  29A4               	goto	l1241
   530  017C  2979               	goto	l1231
   531  017D                     l1235:	
   532                           
   533                           ;SlaveMain.c: 45:                     valorADC_CH5 = AnalogRead_8('H');
   534  017D  3048               	movlw	72
   535  017E  120A  118A  21C4  120A  118A  	fcall	_AnalogRead_8
   536  0183  1283               	bcf	3,5	;RP0=0, select bank0
   537  0184  1303               	bcf	3,6	;RP1=0, select bank0
   538  0185  00A0               	movwf	??_main
   539  0186  0820               	movf	??_main,w
   540  0187  00F9               	movwf	_valorADC_CH5
   541                           
   542                           ;SlaveMain.c: 46:                     ADC_CHselect(0);
   543  0188  3000               	movlw	0
   544  0189  120A  118A  20E1  120A  118A  	fcall	_ADC_CHselect
   545                           
   546                           ;SlaveMain.c: 47:                     break;
   547  018E  29B9               	goto	l1243
   548  018F                     l1237:	
   549                           
   550                           ;SlaveMain.c: 49:                     valorADC_CH0 = AnalogRead_8('H');
   551  018F  3048               	movlw	72
   552  0190  120A  118A  21C4  120A  118A  	fcall	_AnalogRead_8
   553  0195  1283               	bcf	3,5	;RP0=0, select bank0
   554  0196  1303               	bcf	3,6	;RP1=0, select bank0
   555  0197  00A0               	movwf	??_main
   556  0198  0820               	movf	??_main,w
   557  0199  00F8               	movwf	_valorADC_CH0
   558                           
   559                           ;SlaveMain.c: 50:                     ADC_CHselect(5);
   560  019A  3005               	movlw	5
   561  019B  120A  118A  20E1  120A  118A  	fcall	_ADC_CHselect
   562                           
   563                           ;SlaveMain.c: 51:                     break;
   564  01A0  29B9               	goto	l1243
   565  01A1                     l1239:	
   566                           
   567                           ;SlaveMain.c: 53:                     valorADC_CH0 = 0;
   568  01A1  01F8               	clrf	_valorADC_CH0
   569                           
   570                           ;SlaveMain.c: 54:                     valorADC_CH5 = 0;
   571  01A2  01F9               	clrf	_valorADC_CH5
   572                           
   573                           ;SlaveMain.c: 55:             }
   574  01A3  29B9               	goto	l1243
   575  01A4                     l1241:	
   576  01A4  1283               	bcf	3,5	;RP0=0, select bank0
   577  01A5  1303               	bcf	3,6	;RP1=0, select bank0
   578  01A6  0C1F               	rrf	31,w	;volatile
   579  01A7  00A0               	movwf	??_main
   580  01A8  0C20               	rrf	??_main,w
   581  01A9  390F               	andlw	15
   582  01AA  00A1               	movwf	??_main+1
   583  01AB  01A2               	clrf	??_main+2
   584                           
   585                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   586                           ; Switch size 1, requested type "simple"
   587                           ; Number of cases is 1, Range of values is 0 to 0
   588                           ; switch strategies available:
   589                           ; Name         Instructions Cycles
   590                           ; simple_byte            4     3 (average)
   591                           ; direct_byte           11     8 (fixed)
   592                           ; jumptable            260     6 (fixed)
   593                           ;	Chosen strategy is simple_byte
   594  01AC  0822               	movf	??_main+2,w
   595  01AD  3A00               	xorlw	0	; case 0
   596  01AE  1903               	skipnz
   597  01AF  29B1               	goto	l1387
   598  01B0  29A1               	goto	l1239
   599  01B1                     l1387:	
   600                           
   601                           ; Switch size 1, requested type "simple"
   602                           ; Number of cases is 2, Range of values is 0 to 5
   603                           ; switch strategies available:
   604                           ; Name         Instructions Cycles
   605                           ; simple_byte            7     4 (average)
   606                           ; direct_byte           26     8 (fixed)
   607                           ; jumptable            260     6 (fixed)
   608                           ;	Chosen strategy is simple_byte
   609  01B1  0821               	movf	??_main+1,w
   610  01B2  3A00               	xorlw	0	; case 0
   611  01B3  1903               	skipnz
   612  01B4  298F               	goto	l1237
   613  01B5  3A05               	xorlw	5	; case 5
   614  01B6  1903               	skipnz
   615  01B7  297D               	goto	l1235
   616  01B8  29A1               	goto	l1239
   617  01B9                     l1243:	
   618                           
   619                           ;SlaveMain.c: 56:             banderaADC = 0;
   620  01B9  01FA               	clrf	_banderaADC
   621                           
   622                           ;SlaveMain.c: 57:             PIR1bits.ADIF = 0;
   623  01BA  1283               	bcf	3,5	;RP0=0, select bank0
   624  01BB  1303               	bcf	3,6	;RP1=0, select bank0
   625  01BC  130C               	bcf	12,6	;volatile
   626                           
   627                           ;SlaveMain.c: 58:             PIE1bits.ADIE = 1;
   628  01BD  1683               	bsf	3,5	;RP0=1, select bank1
   629  01BE  1303               	bcf	3,6	;RP1=0, select bank1
   630  01BF  170C               	bsf	12,6	;volatile
   631                           
   632                           ;SlaveMain.c: 59:             ADCON0bits.GO_nDONE = 1;
   633  01C0  1283               	bcf	3,5	;RP0=0, select bank0
   634  01C1  1303               	bcf	3,6	;RP1=0, select bank0
   635  01C2  149F               	bsf	31,1	;volatile
   636  01C3  2979               	goto	l1231
   637  01C4                     __end_of_main:	
   638                           
   639                           	psect	text1
   640  01C4                     __ptext1:	
   641 ;; *************** function _AnalogRead_8 *****************
   642 ;; Defined at:
   643 ;;		line 97 in file "ADC.c"
   644 ;; Parameters:    Size  Location     Type
   645 ;;  just            1    wreg     unsigned char 
   646 ;; Auto vars:     Size  Location     Type
   647 ;;  just            1    4[COMMON] unsigned char 
   648 ;;  conversion      1    5[COMMON] unsigned char 
   649 ;; Return value:  Size  Location     Type
   650 ;;                  1    wreg      unsigned char 
   651 ;; Registers used:
   652 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   653 ;; Tracked objects:
   654 ;;		On entry : 0/0
   655 ;;		On exit  : 0/0
   656 ;;		Unchanged: 0/0
   657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   658 ;;      Params:         0       0       0       0       0
   659 ;;      Locals:         2       0       0       0       0
   660 ;;      Temps:          2       0       0       0       0
   661 ;;      Totals:         4       0       0       0       0
   662 ;;Total ram usage:        4 bytes
   663 ;; Hardware stack levels used:    1
   664 ;; Hardware stack levels required when called:    1
   665 ;; This function calls:
   666 ;;		Nothing
   667 ;; This function is called by:
   668 ;;		_main
   669 ;; This function uses a non-reentrant model
   670 ;;
   671                           
   672                           
   673                           ;psect for function _AnalogRead_8
   674  01C4                     _AnalogRead_8:	
   675                           
   676                           ;incstack = 0
   677                           ; Regs used in _AnalogRead_8: [wreg-fsr0h+status,2+status,0]
   678                           ;AnalogRead_8@just stored from wreg
   679  01C4  00F4               	movwf	AnalogRead_8@just
   680                           
   681                           ;ADC.c: 99:     switch (just){
   682  01C5  29CF               	goto	l793
   683  01C6                     l787:	
   684                           
   685                           ;ADC.c: 101:             conversion = ADRESH;
   686  01C6  1283               	bcf	3,5	;RP0=0, select bank0
   687  01C7  29C9               	goto	L1
   688  01C8                     l789:	
   689                           ;ADC.c: 102:             break;
   690                           
   691                           
   692                           ;ADC.c: 104:             conversion = ADRESL;
   693  01C8  1683               	bsf	3,5	;RP0=1, select bank1
   694  01C9                     L1:	
   695  01C9  1303               	bcf	3,6	;RP1=0, select bank1
   696  01CA  081E               	movf	30,w	;volatile
   697  01CB  00F2               	movwf	??_AnalogRead_8
   698  01CC  0872               	movf	??_AnalogRead_8,w
   699  01CD  00F5               	movwf	AnalogRead_8@conversion
   700                           
   701                           ;ADC.c: 105:             break;
   702  01CE  29DF               	goto	l795
   703  01CF                     l793:	
   704  01CF  0874               	movf	AnalogRead_8@just,w
   705  01D0  00F2               	movwf	??_AnalogRead_8
   706  01D1  01F3               	clrf	??_AnalogRead_8+1
   707                           
   708                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   709                           ; Switch size 1, requested type "simple"
   710                           ; Number of cases is 1, Range of values is 0 to 0
   711                           ; switch strategies available:
   712                           ; Name         Instructions Cycles
   713                           ; simple_byte            4     3 (average)
   714                           ; direct_byte           11     8 (fixed)
   715                           ; jumptable            260     6 (fixed)
   716                           ;	Chosen strategy is simple_byte
   717  01D2  0873               	movf	??_AnalogRead_8+1,w
   718  01D3  3A00               	xorlw	0	; case 0
   719  01D4  1903               	skipnz
   720  01D5  29D7               	goto	l1389
   721  01D6  29C6               	goto	l787
   722  01D7                     l1389:	
   723                           
   724                           ; Switch size 1, requested type "simple"
   725                           ; Number of cases is 2, Range of values is 72 to 76
   726                           ; switch strategies available:
   727                           ; Name         Instructions Cycles
   728                           ; simple_byte            7     4 (average)
   729                           ; direct_byte           26    11 (fixed)
   730                           ; jumptable            263     9 (fixed)
   731                           ;	Chosen strategy is simple_byte
   732  01D7  0872               	movf	??_AnalogRead_8,w
   733  01D8  3A48               	xorlw	72	; case 72
   734  01D9  1903               	skipnz
   735  01DA  29C6               	goto	l787
   736  01DB  3A04               	xorlw	4	; case 76
   737  01DC  1903               	skipnz
   738  01DD  29C8               	goto	l789
   739  01DE  29C6               	goto	l787
   740  01DF                     l795:	
   741                           
   742                           ;ADC.c: 109:     return (conversion);
   743  01DF  0875               	movf	AnalogRead_8@conversion,w
   744  01E0  0008               	return
   745  01E1                     __end_of_AnalogRead_8:	
   746                           
   747                           	psect	text2
   748  0017                     __ptext2:	
   749 ;; *************** function _ADConfig *****************
   750 ;; Defined at:
   751 ;;		line 16 in file "ADC.c"
   752 ;; Parameters:    Size  Location     Type
   753 ;;  oscFreq         1    wreg     unsigned char 
   754 ;;  canal           1    2[COMMON] unsigned char 
   755 ;;  justificado     1    3[COMMON] unsigned char 
   756 ;; Auto vars:     Size  Location     Type
   757 ;;  oscFreq         1    6[COMMON] unsigned char 
   758 ;; Return value:  Size  Location     Type
   759 ;;                  1    wreg      void 
   760 ;; Registers used:
   761 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   762 ;; Tracked objects:
   763 ;;		On entry : 0/0
   764 ;;		On exit  : 0/0
   765 ;;		Unchanged: 0/0
   766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   767 ;;      Params:         2       0       0       0       0
   768 ;;      Locals:         1       0       0       0       0
   769 ;;      Temps:          2       0       0       0       0
   770 ;;      Totals:         5       0       0       0       0
   771 ;;Total ram usage:        5 bytes
   772 ;; Hardware stack levels used:    1
   773 ;; Hardware stack levels required when called:    1
   774 ;; This function calls:
   775 ;;		Nothing
   776 ;; This function is called by:
   777 ;;		_main
   778 ;; This function uses a non-reentrant model
   779 ;;
   780                           
   781                           
   782                           ;psect for function _ADConfig
   783  0017                     _ADConfig:	
   784                           
   785                           ;incstack = 0
   786                           ; Regs used in _ADConfig: [wreg-fsr0h+status,2+status,0]
   787                           ;ADConfig@oscFreq stored from wreg
   788  0017  00F6               	movwf	ADConfig@oscFreq
   789                           
   790                           ;ADC.c: 17:     switch(oscFreq){
   791  0018  2831               	goto	l1031
   792  0019                     l1021:	
   793                           
   794                           ;ADC.c: 19:             ADCON0bits.ADCS = 0b00;
   795  0019  303F               	movlw	-193
   796  001A  1283               	bcf	3,5	;RP0=0, select bank0
   797  001B  1303               	bcf	3,6	;RP1=0, select bank0
   798  001C  059F               	andwf	31,f	;volatile
   799                           
   800                           ;ADC.c: 20:             break;
   801  001D  2850               	goto	l1033
   802  001E                     l1023:	
   803  001E  282A               	goto	l1029
   804  001F                     l1025:	
   805                           ;ADC.c: 23:             break;
   806                           
   807                           ;ADC.c: 22:             ADCON0bits.ADCS = 0b01;
   808                           
   809                           
   810                           ;ADC.c: 25:             ADCON0bits.ADCS = 0b10;
   811  001F  1283               	bcf	3,5	;RP0=0, select bank0
   812  0020  1303               	bcf	3,6	;RP1=0, select bank0
   813  0021  081F               	movf	31,w	;volatile
   814  0022  393F               	andlw	-193
   815  0023  3880               	iorlw	128
   816  0024  282F               	goto	L3
   817  0025                     l1027:	
   818                           ;ADC.c: 26:             break;
   819                           
   820                           
   821                           ;ADC.c: 28:             ADCON0bits.ADCS = 0b11;
   822  0025  30C0               	movlw	192
   823  0026  1283               	bcf	3,5	;RP0=0, select bank0
   824  0027  1303               	bcf	3,6	;RP1=0, select bank0
   825  0028  049F               	iorwf	31,f	;volatile
   826                           
   827                           ;ADC.c: 29:             break;
   828  0029  2850               	goto	l1033
   829  002A                     l1029:	
   830                           
   831                           ;ADC.c: 31:             ADCON0bits.ADCS = 0b01;
   832  002A  1283               	bcf	3,5	;RP0=0, select bank0
   833  002B  1303               	bcf	3,6	;RP1=0, select bank0
   834  002C  081F               	movf	31,w	;volatile
   835  002D  393F               	andlw	-193
   836  002E  3840               	iorlw	64
   837  002F                     L3:	
   838  002F  009F               	movwf	31	;volatile
   839                           
   840                           ;ADC.c: 32:     }
   841  0030  2850               	goto	l1033
   842  0031                     l1031:	
   843  0031  0876               	movf	ADConfig@oscFreq,w
   844  0032  00F4               	movwf	??_ADConfig
   845  0033  01F5               	clrf	??_ADConfig+1
   846                           
   847                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   848                           ; Switch size 1, requested type "simple"
   849                           ; Number of cases is 1, Range of values is 0 to 0
   850                           ; switch strategies available:
   851                           ; Name         Instructions Cycles
   852                           ; simple_byte            4     3 (average)
   853                           ; direct_byte           11     8 (fixed)
   854                           ; jumptable            260     6 (fixed)
   855                           ;	Chosen strategy is simple_byte
   856  0034  0875               	movf	??_ADConfig+1,w
   857  0035  3A00               	xorlw	0	; case 0
   858  0036  1903               	skipnz
   859  0037  2839               	goto	l1391
   860  0038  282A               	goto	l1029
   861  0039                     l1391:	
   862                           
   863                           ; Switch size 1, requested type "simple"
   864                           ; Number of cases is 4, Range of values is 1 to 20
   865                           ; switch strategies available:
   866                           ; Name         Instructions Cycles
   867                           ; simple_byte           13     7 (average)
   868                           ; direct_byte           71    11 (fixed)
   869                           ; jumptable            263     9 (fixed)
   870                           ;	Chosen strategy is simple_byte
   871  0039  0874               	movf	??_ADConfig,w
   872  003A  3A01               	xorlw	1	; case 1
   873  003B  1903               	skipnz
   874  003C  2819               	goto	l1021
   875  003D  3A05               	xorlw	5	; case 4
   876  003E  1903               	skipnz
   877  003F  281E               	goto	l1023
   878  0040  3A0C               	xorlw	12	; case 8
   879  0041  1903               	skipnz
   880  0042  281F               	goto	l1025
   881  0043  3A1C               	xorlw	28	; case 20
   882  0044  1903               	skipnz
   883  0045  2825               	goto	l1027
   884  0046  282A               	goto	l1029
   885  0047                     l77:	
   886                           ;ADC.c: 34:         case 'H':
   887                           
   888  0047  284C               	goto	l80
   889  0048                     l79:	
   890                           ;ADC.c: 37:         case 'L':
   891                           
   892                           ;ADC.c: 36:             break;
   893                           
   894                           ;ADC.c: 35:             ADCON1bits.ADFM = 0;
   895                           
   896                           
   897                           ;ADC.c: 38:             ADCON1bits.ADFM = 1;
   898  0048  1683               	bsf	3,5	;RP0=1, select bank1
   899  0049  1303               	bcf	3,6	;RP1=0, select bank1
   900  004A  179F               	bsf	31,7	;volatile
   901                           
   902                           ;ADC.c: 39:             break;
   903  004B  28AB               	goto	l1053
   904  004C                     l80:	
   905                           ;ADC.c: 40:         default:
   906                           
   907                           
   908                           ;ADC.c: 41:             ADCON1bits.ADFM = 0;
   909  004C  1683               	bsf	3,5	;RP0=1, select bank1
   910  004D  1303               	bcf	3,6	;RP1=0, select bank1
   911  004E  139F               	bcf	31,7	;volatile
   912                           
   913                           ;ADC.c: 42:     }
   914  004F  28AB               	goto	l1053
   915  0050                     l1033:	
   916  0050  0873               	movf	ADConfig@justificado,w
   917  0051  00F4               	movwf	??_ADConfig
   918  0052  01F5               	clrf	??_ADConfig+1
   919                           
   920                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   921                           ; Switch size 1, requested type "simple"
   922                           ; Number of cases is 1, Range of values is 0 to 0
   923                           ; switch strategies available:
   924                           ; Name         Instructions Cycles
   925                           ; simple_byte            4     3 (average)
   926                           ; direct_byte           11     8 (fixed)
   927                           ; jumptable            260     6 (fixed)
   928                           ;	Chosen strategy is simple_byte
   929  0053  0875               	movf	??_ADConfig+1,w
   930  0054  3A00               	xorlw	0	; case 0
   931  0055  1903               	skipnz
   932  0056  2858               	goto	l1393
   933  0057  284C               	goto	l80
   934  0058                     l1393:	
   935                           
   936                           ; Switch size 1, requested type "simple"
   937                           ; Number of cases is 2, Range of values is 72 to 76
   938                           ; switch strategies available:
   939                           ; Name         Instructions Cycles
   940                           ; simple_byte            7     4 (average)
   941                           ; direct_byte           26    11 (fixed)
   942                           ; jumptable            263     9 (fixed)
   943                           ;	Chosen strategy is simple_byte
   944  0058  0874               	movf	??_ADConfig,w
   945  0059  3A48               	xorlw	72	; case 72
   946  005A  1903               	skipnz
   947  005B  2847               	goto	l77
   948  005C  3A04               	xorlw	4	; case 76
   949  005D  1903               	skipnz
   950  005E  2848               	goto	l79
   951  005F  284C               	goto	l80
   952  0060                     l82:	
   953                           ;ADC.c: 44:         case 0:
   954                           
   955                           
   956                           ;ADC.c: 45:             TRISAbits.TRISA0 = 1;
   957  0060  1405               	bsf	5,0	;volatile
   958                           
   959                           ;ADC.c: 46:             ANSELbits.ANS0 = 1;
   960  0061  1683               	bsf	3,5	;RP0=1, select bank3
   961  0062  1703               	bsf	3,6	;RP1=1, select bank3
   962  0063  1408               	bsf	8,0	;volatile
   963                           
   964                           ;ADC.c: 47:             ADCON0bits.CHS = 0;
   965  0064  30C3               	movlw	-61
   966  0065  1283               	bcf	3,5	;RP0=0, select bank0
   967  0066  1303               	bcf	3,6	;RP1=0, select bank0
   968  0067  059F               	andwf	31,f	;volatile
   969                           
   970                           ;ADC.c: 48:             break;
   971  0068  28CD               	goto	l83
   972  0069                     l84:	
   973                           ;ADC.c: 49:         case 1:
   974                           
   975                           
   976                           ;ADC.c: 50:             TRISAbits.TRISA1 = 1;
   977  0069  1485               	bsf	5,1	;volatile
   978                           
   979                           ;ADC.c: 51:             ANSELbits.ANS1 = 1;
   980  006A  1683               	bsf	3,5	;RP0=1, select bank3
   981  006B  1703               	bsf	3,6	;RP1=1, select bank3
   982  006C  1488               	bsf	8,1	;volatile
   983                           
   984                           ;ADC.c: 52:             ADCON0bits.CHS = 1;
   985  006D  1283               	bcf	3,5	;RP0=0, select bank0
   986  006E  1303               	bcf	3,6	;RP1=0, select bank0
   987  006F  081F               	movf	31,w	;volatile
   988  0070  39C3               	andlw	-61
   989  0071  3804               	iorlw	4
   990  0072  28A9               	goto	L9
   991  0073                     l85:	
   992                           ;ADC.c: 54:         case 2:
   993                           
   994                           ;ADC.c: 53:             break;
   995                           
   996                           
   997                           ;ADC.c: 55:             TRISAbits.TRISA2 = 1;
   998  0073  1505               	bsf	5,2	;volatile
   999                           
  1000                           ;ADC.c: 56:             ANSELbits.ANS2 = 1;
  1001  0074  1683               	bsf	3,5	;RP0=1, select bank3
  1002  0075  1703               	bsf	3,6	;RP1=1, select bank3
  1003  0076  1508               	bsf	8,2	;volatile
  1004                           
  1005                           ;ADC.c: 57:             ADCON0bits.CHS = 2;
  1006  0077  1283               	bcf	3,5	;RP0=0, select bank0
  1007  0078  1303               	bcf	3,6	;RP1=0, select bank0
  1008  0079  081F               	movf	31,w	;volatile
  1009  007A  39C3               	andlw	-61
  1010  007B  3808               	iorlw	8
  1011  007C  28A9               	goto	L9
  1012  007D                     l86:	
  1013                           ;ADC.c: 59:         case 3:
  1014                           
  1015                           ;ADC.c: 58:             break;
  1016                           
  1017                           
  1018                           ;ADC.c: 60:             TRISAbits.TRISA3 = 1;
  1019  007D  1585               	bsf	5,3	;volatile
  1020                           
  1021                           ;ADC.c: 61:             ANSELbits.ANS3 = 1;
  1022  007E  1683               	bsf	3,5	;RP0=1, select bank3
  1023  007F  1703               	bsf	3,6	;RP1=1, select bank3
  1024  0080  1588               	bsf	8,3	;volatile
  1025  0081  2886               	goto	L10
  1026  0082                     l87:	
  1027                           ;ADC.c: 64:         case 4:
  1028                           
  1029                           ;ADC.c: 63:             break;
  1030                           
  1031                           ;ADC.c: 62:             ADCON0bits.CHS = 3;
  1032                           
  1033                           
  1034                           ;ADC.c: 65:             TRISAbits.TRISA5 = 1;
  1035  0082  1685               	bsf	5,5	;volatile
  1036                           
  1037                           ;ADC.c: 66:             ANSELbits.ANS4 = 1;
  1038  0083  1683               	bsf	3,5	;RP0=1, select bank3
  1039  0084  1703               	bsf	3,6	;RP1=1, select bank3
  1040  0085  1608               	bsf	8,4	;volatile
  1041  0086                     L10:	
  1042                           
  1043                           ;ADC.c: 67:             ADCON0bits.CHS = 3;
  1044  0086  1283               	bcf	3,5	;RP0=0, select bank0
  1045  0087  1303               	bcf	3,6	;RP1=0, select bank0
  1046  0088  081F               	movf	31,w	;volatile
  1047  0089  39C3               	andlw	-61
  1048  008A  380C               	iorlw	12
  1049  008B  28A9               	goto	L9
  1050  008C                     l88:	
  1051                           ;ADC.c: 69:         case 5:
  1052                           
  1053                           ;ADC.c: 68:             break;
  1054                           
  1055                           
  1056                           ;ADC.c: 70:             TRISEbits.TRISE0 = 1;
  1057  008C  1409               	bsf	9,0	;volatile
  1058                           
  1059                           ;ADC.c: 71:             ANSELbits.ANS5 = 1;
  1060  008D  1683               	bsf	3,5	;RP0=1, select bank3
  1061  008E  1703               	bsf	3,6	;RP1=1, select bank3
  1062  008F  1688               	bsf	8,5	;volatile
  1063                           
  1064                           ;ADC.c: 72:             ADCON0bits.CHS = 5;
  1065  0090  1283               	bcf	3,5	;RP0=0, select bank0
  1066  0091  1303               	bcf	3,6	;RP1=0, select bank0
  1067  0092  081F               	movf	31,w	;volatile
  1068  0093  39C3               	andlw	-61
  1069  0094  3814               	iorlw	20
  1070  0095  28A9               	goto	L9
  1071  0096                     l89:	
  1072                           ;ADC.c: 74:         case 6:
  1073                           
  1074                           ;ADC.c: 73:             break;
  1075                           
  1076                           
  1077                           ;ADC.c: 75:             TRISEbits.TRISE1 = 1;
  1078  0096  1489               	bsf	9,1	;volatile
  1079                           
  1080                           ;ADC.c: 76:             ANSELbits.ANS6 = 1;
  1081  0097  1683               	bsf	3,5	;RP0=1, select bank3
  1082  0098  1703               	bsf	3,6	;RP1=1, select bank3
  1083  0099  1708               	bsf	8,6	;volatile
  1084                           
  1085                           ;ADC.c: 77:             ADCON0bits.CHS = 6;
  1086  009A  1283               	bcf	3,5	;RP0=0, select bank0
  1087  009B  1303               	bcf	3,6	;RP1=0, select bank0
  1088  009C  081F               	movf	31,w	;volatile
  1089  009D  39C3               	andlw	-61
  1090  009E  3818               	iorlw	24
  1091  009F  28A9               	goto	L9
  1092  00A0                     l90:	
  1093                           ;ADC.c: 79:         case 7:
  1094                           
  1095                           ;ADC.c: 78:             break;
  1096                           
  1097                           
  1098                           ;ADC.c: 80:             TRISEbits.TRISE2 = 1;
  1099  00A0  1509               	bsf	9,2	;volatile
  1100                           
  1101                           ;ADC.c: 81:             ANSELbits.ANS7 = 1;
  1102  00A1  1683               	bsf	3,5	;RP0=1, select bank3
  1103  00A2  1703               	bsf	3,6	;RP1=1, select bank3
  1104  00A3  1788               	bsf	8,7	;volatile
  1105                           
  1106                           ;ADC.c: 82:             ADCON0bits.CHS = 7;
  1107  00A4  1283               	bcf	3,5	;RP0=0, select bank0
  1108  00A5  1303               	bcf	3,6	;RP1=0, select bank0
  1109  00A6  081F               	movf	31,w	;volatile
  1110  00A7  39C3               	andlw	-61
  1111  00A8  381C               	iorlw	28
  1112  00A9                     L9:	
  1113  00A9  009F               	movwf	31	;volatile
  1114                           
  1115                           ;ADC.c: 83:             break;
  1116  00AA  28CD               	goto	l83
  1117  00AB                     l1053:	
  1118  00AB  0872               	movf	ADConfig@canal,w
  1119  00AC  00F4               	movwf	??_ADConfig
  1120  00AD  01F5               	clrf	??_ADConfig+1
  1121                           
  1122                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1123                           ; Switch size 1, requested type "simple"
  1124                           ; Number of cases is 1, Range of values is 0 to 0
  1125                           ; switch strategies available:
  1126                           ; Name         Instructions Cycles
  1127                           ; simple_byte            4     3 (average)
  1128                           ; direct_byte           11     8 (fixed)
  1129                           ; jumptable            260     6 (fixed)
  1130                           ;	Chosen strategy is simple_byte
  1131  00AE  0875               	movf	??_ADConfig+1,w
  1132  00AF  3A00               	xorlw	0	; case 0
  1133  00B0  1903               	skipnz
  1134  00B1  28B3               	goto	l1395
  1135  00B2  28CD               	goto	l83
  1136  00B3                     l1395:	
  1137                           
  1138                           ; Switch size 1, requested type "simple"
  1139                           ; Number of cases is 8, Range of values is 0 to 7
  1140                           ; switch strategies available:
  1141                           ; Name         Instructions Cycles
  1142                           ; simple_byte           25    13 (average)
  1143                           ; direct_byte           32     8 (fixed)
  1144                           ; jumptable            260     6 (fixed)
  1145                           ;	Chosen strategy is simple_byte
  1146  00B3  0874               	movf	??_ADConfig,w
  1147  00B4  3A00               	xorlw	0	; case 0
  1148  00B5  1903               	skipnz
  1149  00B6  2860               	goto	l82
  1150  00B7  3A01               	xorlw	1	; case 1
  1151  00B8  1903               	skipnz
  1152  00B9  2869               	goto	l84
  1153  00BA  3A03               	xorlw	3	; case 2
  1154  00BB  1903               	skipnz
  1155  00BC  2873               	goto	l85
  1156  00BD  3A01               	xorlw	1	; case 3
  1157  00BE  1903               	skipnz
  1158  00BF  287D               	goto	l86
  1159  00C0  3A07               	xorlw	7	; case 4
  1160  00C1  1903               	skipnz
  1161  00C2  2882               	goto	l87
  1162  00C3  3A01               	xorlw	1	; case 5
  1163  00C4  1903               	skipnz
  1164  00C5  288C               	goto	l88
  1165  00C6  3A03               	xorlw	3	; case 6
  1166  00C7  1903               	skipnz
  1167  00C8  2896               	goto	l89
  1168  00C9  3A01               	xorlw	1	; case 7
  1169  00CA  1903               	skipnz
  1170  00CB  28A0               	goto	l90
  1171  00CC  28CD               	goto	l83
  1172  00CD                     l83:	
  1173                           
  1174                           ;ADC.c: 88:     ADCON0bits.ADON = 1;
  1175  00CD  1283               	bcf	3,5	;RP0=0, select bank0
  1176  00CE  141F               	bsf	31,0	;volatile
  1177                           
  1178                           ;ADC.c: 89:     PIR1bits.ADIF = 0;
  1179  00CF  130C               	bcf	12,6	;volatile
  1180                           
  1181                           ;ADC.c: 90:     PIE1bits.ADIE = 1;
  1182  00D0  1683               	bsf	3,5	;RP0=1, select bank1
  1183  00D1  1303               	bcf	3,6	;RP1=0, select bank1
  1184  00D2  170C               	bsf	12,6	;volatile
  1185                           
  1186                           ;ADC.c: 91:     INTCONbits.PEIE = 1;
  1187  00D3  170B               	bsf	11,6	;volatile
  1188                           
  1189                           ;ADC.c: 92:     INTCONbits.GIE = 1;
  1190  00D4  178B               	bsf	11,7	;volatile
  1191                           
  1192                           ;ADC.c: 93:     _delay((unsigned long)((30)*(4000000/4000.0)));
  1193  00D5  3027               	movlw	39
  1194  00D6  00F5               	movwf	??_ADConfig+1
  1195  00D7  30F5               	movlw	245
  1196  00D8  00F4               	movwf	??_ADConfig
  1197  00D9                     u87:	
  1198  00D9  0BF4               	decfsz	??_ADConfig,f
  1199  00DA  28D9               	goto	u87
  1200  00DB  0BF5               	decfsz	??_ADConfig+1,f
  1201  00DC  28D9               	goto	u87
  1202                           
  1203                           ;ADC.c: 94:     ADCON0bits.GO_nDONE = 1;
  1204  00DD  1283               	bcf	3,5	;RP0=0, select bank0
  1205  00DE  1303               	bcf	3,6	;RP1=0, select bank0
  1206  00DF  149F               	bsf	31,1	;volatile
  1207  00E0  0008               	return
  1208  00E1                     __end_of_ADConfig:	
  1209                           
  1210                           	psect	text3
  1211  00E1                     __ptext3:	
  1212 ;; *************** function _ADC_CHselect *****************
  1213 ;; Defined at:
  1214 ;;		line 121 in file "ADC.c"
  1215 ;; Parameters:    Size  Location     Type
  1216 ;;  canal           1    wreg     unsigned char 
  1217 ;; Auto vars:     Size  Location     Type
  1218 ;;  canal           1    4[COMMON] unsigned char 
  1219 ;; Return value:  Size  Location     Type
  1220 ;;                  1    wreg      void 
  1221 ;; Registers used:
  1222 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1223 ;; Tracked objects:
  1224 ;;		On entry : 0/0
  1225 ;;		On exit  : 0/0
  1226 ;;		Unchanged: 0/0
  1227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1228 ;;      Params:         0       0       0       0       0
  1229 ;;      Locals:         1       0       0       0       0
  1230 ;;      Temps:          2       0       0       0       0
  1231 ;;      Totals:         3       0       0       0       0
  1232 ;;Total ram usage:        3 bytes
  1233 ;; Hardware stack levels used:    1
  1234 ;; Hardware stack levels required when called:    1
  1235 ;; This function calls:
  1236 ;;		Nothing
  1237 ;; This function is called by:
  1238 ;;		_main
  1239 ;; This function uses a non-reentrant model
  1240 ;;
  1241                           
  1242                           
  1243                           ;psect for function _ADC_CHselect
  1244  00E1                     _ADC_CHselect:	
  1245                           
  1246                           ;incstack = 0
  1247                           ; Regs used in _ADC_CHselect: [wreg-fsr0h+status,2+status,0]
  1248                           ;ADC_CHselect@canal stored from wreg
  1249  00E1  00F4               	movwf	ADC_CHselect@canal
  1250                           
  1251                           ;ADC.c: 122:     switch (canal){
  1252  00E2  2949               	goto	l823
  1253  00E3                     l106:	
  1254                           ;ADC.c: 123:         case 0:
  1255                           
  1256                           
  1257                           ;ADC.c: 124:             TRISAbits.TRISA0 = 1;
  1258  00E3  1683               	bsf	3,5	;RP0=1, select bank1
  1259  00E4  1303               	bcf	3,6	;RP1=0, select bank1
  1260  00E5  1405               	bsf	5,0	;volatile
  1261                           
  1262                           ;ADC.c: 125:             ANSELbits.ANS0 = 1;
  1263  00E6  1683               	bsf	3,5	;RP0=1, select bank3
  1264  00E7  1703               	bsf	3,6	;RP1=1, select bank3
  1265  00E8  1408               	bsf	8,0	;volatile
  1266                           
  1267                           ;ADC.c: 126:             ADCON0bits.CHS = 0;
  1268  00E9  30C3               	movlw	-61
  1269  00EA  1283               	bcf	3,5	;RP0=0, select bank0
  1270  00EB  1303               	bcf	3,6	;RP1=0, select bank0
  1271  00EC  059F               	andwf	31,f	;volatile
  1272                           
  1273                           ;ADC.c: 127:             break;
  1274  00ED  0008               	return
  1275  00EE                     l108:	
  1276                           ;ADC.c: 128:         case 1:
  1277                           
  1278                           
  1279                           ;ADC.c: 129:             TRISAbits.TRISA1 = 1;
  1280  00EE  1683               	bsf	3,5	;RP0=1, select bank1
  1281  00EF  1303               	bcf	3,6	;RP1=0, select bank1
  1282  00F0  1485               	bsf	5,1	;volatile
  1283                           
  1284                           ;ADC.c: 130:             ANSELbits.ANS1 = 1;
  1285  00F1  1683               	bsf	3,5	;RP0=1, select bank3
  1286  00F2  1703               	bsf	3,6	;RP1=1, select bank3
  1287  00F3  1488               	bsf	8,1	;volatile
  1288                           
  1289                           ;ADC.c: 131:             ADCON0bits.CHS = 1;
  1290  00F4  1283               	bcf	3,5	;RP0=0, select bank0
  1291  00F5  1303               	bcf	3,6	;RP1=0, select bank0
  1292  00F6  081F               	movf	31,w	;volatile
  1293  00F7  39C3               	andlw	-61
  1294  00F8  3804               	iorlw	4
  1295  00F9  009F               	movwf	31	;volatile
  1296                           
  1297                           ;ADC.c: 132:             break;
  1298  00FA  0008               	return
  1299  00FB                     l109:	
  1300                           ;ADC.c: 133:         case 2:
  1301                           
  1302                           
  1303                           ;ADC.c: 134:             TRISAbits.TRISA2 = 1;
  1304  00FB  1683               	bsf	3,5	;RP0=1, select bank1
  1305  00FC  1303               	bcf	3,6	;RP1=0, select bank1
  1306  00FD  1505               	bsf	5,2	;volatile
  1307                           
  1308                           ;ADC.c: 135:             ANSELbits.ANS2 = 1;
  1309  00FE  1683               	bsf	3,5	;RP0=1, select bank3
  1310  00FF  1703               	bsf	3,6	;RP1=1, select bank3
  1311  0100  1508               	bsf	8,2	;volatile
  1312                           
  1313                           ;ADC.c: 136:             ADCON0bits.CHS = 2;
  1314  0101  1283               	bcf	3,5	;RP0=0, select bank0
  1315  0102  1303               	bcf	3,6	;RP1=0, select bank0
  1316  0103  081F               	movf	31,w	;volatile
  1317  0104  39C3               	andlw	-61
  1318  0105  3808               	iorlw	8
  1319  0106  009F               	movwf	31	;volatile
  1320                           
  1321                           ;ADC.c: 137:             break;
  1322  0107  0008               	return
  1323  0108                     l110:	
  1324                           ;ADC.c: 138:         case 3:
  1325                           
  1326                           
  1327                           ;ADC.c: 139:             TRISAbits.TRISA3 = 1;
  1328  0108  1683               	bsf	3,5	;RP0=1, select bank1
  1329  0109  1303               	bcf	3,6	;RP1=0, select bank1
  1330  010A  1585               	bsf	5,3	;volatile
  1331                           
  1332                           ;ADC.c: 140:             ANSELbits.ANS3 = 1;
  1333  010B  1683               	bsf	3,5	;RP0=1, select bank3
  1334  010C  1703               	bsf	3,6	;RP1=1, select bank3
  1335  010D  1588               	bsf	8,3	;volatile
  1336                           
  1337                           ;ADC.c: 141:             ADCON0bits.CHS = 3;
  1338  010E  1283               	bcf	3,5	;RP0=0, select bank0
  1339  010F  1303               	bcf	3,6	;RP1=0, select bank0
  1340  0110  081F               	movf	31,w	;volatile
  1341  0111  39C3               	andlw	-61
  1342  0112  380C               	iorlw	12
  1343  0113  009F               	movwf	31	;volatile
  1344                           
  1345                           ;ADC.c: 142:             break;
  1346  0114  0008               	return
  1347  0115                     l111:	
  1348                           ;ADC.c: 143:         case 4:
  1349                           
  1350                           
  1351                           ;ADC.c: 144:             TRISAbits.TRISA5 = 1;
  1352  0115  1683               	bsf	3,5	;RP0=1, select bank1
  1353  0116  1303               	bcf	3,6	;RP1=0, select bank1
  1354  0117  1685               	bsf	5,5	;volatile
  1355                           
  1356                           ;ADC.c: 145:             ANSELbits.ANS4 = 1;
  1357  0118  1683               	bsf	3,5	;RP0=1, select bank3
  1358  0119  1703               	bsf	3,6	;RP1=1, select bank3
  1359  011A  1608               	bsf	8,4	;volatile
  1360                           
  1361                           ;ADC.c: 146:             ADCON0bits.CHS = 3;
  1362  011B  1283               	bcf	3,5	;RP0=0, select bank0
  1363  011C  1303               	bcf	3,6	;RP1=0, select bank0
  1364  011D  081F               	movf	31,w	;volatile
  1365  011E  39C3               	andlw	-61
  1366  011F  380C               	iorlw	12
  1367  0120  009F               	movwf	31	;volatile
  1368                           
  1369                           ;ADC.c: 147:             break;
  1370  0121  0008               	return
  1371  0122                     l112:	
  1372                           ;ADC.c: 148:         case 5:
  1373                           
  1374                           
  1375                           ;ADC.c: 149:             TRISEbits.TRISE0 = 1;
  1376  0122  1683               	bsf	3,5	;RP0=1, select bank1
  1377  0123  1303               	bcf	3,6	;RP1=0, select bank1
  1378  0124  1409               	bsf	9,0	;volatile
  1379                           
  1380                           ;ADC.c: 150:             ANSELbits.ANS5 = 1;
  1381  0125  1683               	bsf	3,5	;RP0=1, select bank3
  1382  0126  1703               	bsf	3,6	;RP1=1, select bank3
  1383  0127  1688               	bsf	8,5	;volatile
  1384                           
  1385                           ;ADC.c: 151:             ADCON0bits.CHS = 5;
  1386  0128  1283               	bcf	3,5	;RP0=0, select bank0
  1387  0129  1303               	bcf	3,6	;RP1=0, select bank0
  1388  012A  081F               	movf	31,w	;volatile
  1389  012B  39C3               	andlw	-61
  1390  012C  3814               	iorlw	20
  1391  012D  009F               	movwf	31	;volatile
  1392                           
  1393                           ;ADC.c: 152:             break;
  1394  012E  0008               	return
  1395  012F                     l113:	
  1396                           ;ADC.c: 153:         case 6:
  1397                           
  1398                           
  1399                           ;ADC.c: 154:             TRISEbits.TRISE1 = 1;
  1400  012F  1683               	bsf	3,5	;RP0=1, select bank1
  1401  0130  1303               	bcf	3,6	;RP1=0, select bank1
  1402  0131  1489               	bsf	9,1	;volatile
  1403                           
  1404                           ;ADC.c: 155:             ANSELbits.ANS6 = 1;
  1405  0132  1683               	bsf	3,5	;RP0=1, select bank3
  1406  0133  1703               	bsf	3,6	;RP1=1, select bank3
  1407  0134  1708               	bsf	8,6	;volatile
  1408                           
  1409                           ;ADC.c: 156:             ADCON0bits.CHS = 6;
  1410  0135  1283               	bcf	3,5	;RP0=0, select bank0
  1411  0136  1303               	bcf	3,6	;RP1=0, select bank0
  1412  0137  081F               	movf	31,w	;volatile
  1413  0138  39C3               	andlw	-61
  1414  0139  3818               	iorlw	24
  1415  013A  009F               	movwf	31	;volatile
  1416                           
  1417                           ;ADC.c: 157:             break;
  1418  013B  0008               	return
  1419  013C                     l114:	
  1420                           ;ADC.c: 158:         case 7:
  1421                           
  1422                           
  1423                           ;ADC.c: 159:             TRISEbits.TRISE2 = 1;
  1424  013C  1683               	bsf	3,5	;RP0=1, select bank1
  1425  013D  1303               	bcf	3,6	;RP1=0, select bank1
  1426  013E  1509               	bsf	9,2	;volatile
  1427                           
  1428                           ;ADC.c: 160:             ANSELbits.ANS7 = 1;
  1429  013F  1683               	bsf	3,5	;RP0=1, select bank3
  1430  0140  1703               	bsf	3,6	;RP1=1, select bank3
  1431  0141  1788               	bsf	8,7	;volatile
  1432                           
  1433                           ;ADC.c: 161:             ADCON0bits.CHS = 7;
  1434  0142  1283               	bcf	3,5	;RP0=0, select bank0
  1435  0143  1303               	bcf	3,6	;RP1=0, select bank0
  1436  0144  081F               	movf	31,w	;volatile
  1437  0145  39C3               	andlw	-61
  1438  0146  381C               	iorlw	28
  1439  0147  009F               	movwf	31	;volatile
  1440                           
  1441                           ;ADC.c: 162:             break;
  1442  0148  0008               	return
  1443  0149                     l823:	
  1444  0149  0874               	movf	ADC_CHselect@canal,w
  1445  014A  00F2               	movwf	??_ADC_CHselect
  1446  014B  01F3               	clrf	??_ADC_CHselect+1
  1447                           
  1448                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1449                           ; Switch size 1, requested type "simple"
  1450                           ; Number of cases is 1, Range of values is 0 to 0
  1451                           ; switch strategies available:
  1452                           ; Name         Instructions Cycles
  1453                           ; simple_byte            4     3 (average)
  1454                           ; direct_byte           11     8 (fixed)
  1455                           ; jumptable            260     6 (fixed)
  1456                           ;	Chosen strategy is simple_byte
  1457  014C  0873               	movf	??_ADC_CHselect+1,w
  1458  014D  3A00               	xorlw	0	; case 0
  1459  014E  1903               	skipnz
  1460  014F  2951               	goto	l1397
  1461  0150  296B               	goto	l115
  1462  0151                     l1397:	
  1463                           
  1464                           ; Switch size 1, requested type "simple"
  1465                           ; Number of cases is 8, Range of values is 0 to 7
  1466                           ; switch strategies available:
  1467                           ; Name         Instructions Cycles
  1468                           ; simple_byte           25    13 (average)
  1469                           ; direct_byte           32     8 (fixed)
  1470                           ; jumptable            260     6 (fixed)
  1471                           ;	Chosen strategy is simple_byte
  1472  0151  0872               	movf	??_ADC_CHselect,w
  1473  0152  3A00               	xorlw	0	; case 0
  1474  0153  1903               	skipnz
  1475  0154  28E3               	goto	l106
  1476  0155  3A01               	xorlw	1	; case 1
  1477  0156  1903               	skipnz
  1478  0157  28EE               	goto	l108
  1479  0158  3A03               	xorlw	3	; case 2
  1480  0159  1903               	skipnz
  1481  015A  28FB               	goto	l109
  1482  015B  3A01               	xorlw	1	; case 3
  1483  015C  1903               	skipnz
  1484  015D  2908               	goto	l110
  1485  015E  3A07               	xorlw	7	; case 4
  1486  015F  1903               	skipnz
  1487  0160  2915               	goto	l111
  1488  0161  3A01               	xorlw	1	; case 5
  1489  0162  1903               	skipnz
  1490  0163  2922               	goto	l112
  1491  0164  3A03               	xorlw	3	; case 6
  1492  0165  1903               	skipnz
  1493  0166  292F               	goto	l113
  1494  0167  3A01               	xorlw	1	; case 7
  1495  0168  1903               	skipnz
  1496  0169  293C               	goto	l114
  1497  016A  296B               	goto	l115
  1498  016B                     l115:	
  1499  016B  0008               	return
  1500  016C                     __end_of_ADC_CHselect:	
  1501                           
  1502                           	psect	text4
  1503  01E1                     __ptext4:	
  1504 ;; *************** function _ISR *****************
  1505 ;; Defined at:
  1506 ;;		line 32 in file "SlaveMain.c"
  1507 ;; Parameters:    Size  Location     Type
  1508 ;;		None
  1509 ;; Auto vars:     Size  Location     Type
  1510 ;;		None
  1511 ;; Return value:  Size  Location     Type
  1512 ;;                  1    wreg      void 
  1513 ;; Registers used:
  1514 ;;		None
  1515 ;; Tracked objects:
  1516 ;;		On entry : 0/0
  1517 ;;		On exit  : 0/0
  1518 ;;		Unchanged: 0/0
  1519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1520 ;;      Params:         0       0       0       0       0
  1521 ;;      Locals:         0       0       0       0       0
  1522 ;;      Temps:          2       0       0       0       0
  1523 ;;      Totals:         2       0       0       0       0
  1524 ;;Total ram usage:        2 bytes
  1525 ;; Hardware stack levels used:    1
  1526 ;; This function calls:
  1527 ;;		Nothing
  1528 ;; This function is called by:
  1529 ;;		Interrupt level 1
  1530 ;; This function uses a non-reentrant model
  1531 ;;
  1532                           
  1533                           
  1534                           ;psect for function _ISR
  1535  01E1                     _ISR:	
  1536                           
  1537                           ;SlaveMain.c: 33:     if(ADIE && ADIF){
  1538  01E1  1683               	bsf	3,5	;RP0=1, select bank1
  1539  01E2  1303               	bcf	3,6	;RP1=0, select bank1
  1540  01E3  1F0C               	btfss	12,6	;volatile
  1541  01E4  29EB               	goto	i1l30
  1542  01E5  1283               	bcf	3,5	;RP0=0, select bank0
  1543  01E6  1303               	bcf	3,6	;RP1=0, select bank0
  1544  01E7  1F0C               	btfss	12,6	;volatile
  1545  01E8  29EB               	goto	i1l30
  1546                           
  1547                           ;SlaveMain.c: 34:         banderaADC = 1;
  1548  01E9  01FA               	clrf	_banderaADC
  1549  01EA  0AFA               	incf	_banderaADC,f
  1550  01EB                     i1l30:	
  1551  01EB  0871               	movf	??_ISR+1,w
  1552  01EC  008A               	movwf	10
  1553  01ED  0E70               	swapf	??_ISR^(0+4294967168),w
  1554  01EE  0083               	movwf	3
  1555  01EF  0EFE               	swapf	126,f
  1556  01F0  0E7E               	swapf	126,w
  1557  01F1  0009               	retfie
  1558  01F2                     __end_of_ISR:	
  1559  007E                     btemp	set	126	;btemp
  1560  007E                     wtemp0	set	126
  1561                           
  1562                           	psect	intentry
  1563  0004                     __pintentry:	
  1564                           ;incstack = 0
  1565                           ; Regs used in _ISR: []
  1566                           
  1567  0004                     interrupt_function:	
  1568  007E                     saved_w	set	btemp
  1569  0004  00FE               	movwf	btemp
  1570  0005  0E03               	swapf	3,w
  1571  0006  00F0               	movwf	??_ISR
  1572  0007  080A               	movf	10,w
  1573  0008  00F1               	movwf	??_ISR+1
  1574  0009  120A  118A  29E1   	ljmp	_ISR


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      11
    BANK0            80      3       3
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_ADConfig

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0     263
                                              0 BANK0      3     3      0
                       _ADC_CHselect
                           _ADConfig
                       _AnalogRead_8
 ---------------------------------------------------------------------------------
 (1) _AnalogRead_8                                         4     4      0      30
                                              2 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (1) _ADConfig                                             5     3      2     218
                                              2 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (1) _ADC_CHselect                                         3     3      0      15
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _ISR                                                  2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_CHselect
   _ADConfig
   _AnalogRead_8

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      7       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       E       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      3       3       5        3.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       E      12        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Wed Feb 12 16:17:49 2020

             __CFG_CP$OFF 0000               _SSPSTATbits 0094                        l80 004C  
                      l90 00A0                        l82 0060                        l83 00CD  
                      l84 0069                        l85 0073                        l77 0047  
                      l86 007D                        l87 0082                        l79 0048  
                      l88 008C                        l89 0096                        u87 00D9  
                     l110 0108                       l111 0115                       l112 0122  
                     l113 012F                       l114 013C                       l106 00E3  
                     l115 016B                       l108 00EE                       l109 00FB  
                     l823 0149                       l793 01CF                       l795 01DF  
                     l787 01C6                       l789 01C8              __CFG_CPD$OFF 0000  
                     _ISR 01E1     __size_of_ADC_CHselect 008B              __CFG_LVP$OFF 0000  
                    ?_ISR 0070                      l1021 0019                      l1023 001E  
                    l1031 0031                      l1025 001F                      l1033 0050  
                    l1027 0025                      l1053 00AB                      l1029 002A  
                    l1231 0179                      l1241 01A4                      l1243 01B9  
                    l1235 017D                      l1237 018F                      l1239 01A1  
                    l1391 0039                      l1393 0058                      l1395 00B3  
                    l1387 01B1                      l1397 0151                      l1389 01D7  
                    _ADIE 0466                      _ADIF 0066                      i1l30 01EB  
            __CFG_WRT$OFF 0000                      _main 016C                      btemp 007E  
                    start 000C             __CFG_IESO$OFF 0000          __end_of_ADConfig 00E1  
                   ??_ISR 0070                     ?_main 0070              _ADC_CHselect 00E1  
           __CFG_WDTE$OFF 0000            __CFG_FCMEN$OFF 0000            __CFG_BOREN$OFF 0000  
                   pclath 000A                     status 0003                     wtemp0 007E  
          __CFG_MCLRE$OFF 0000           __initialization 000F              __end_of_main 01C4  
                  ??_main 0020     __size_of_AnalogRead_8 001D                    _ADRESH 001E  
                  _ADRESL 009E                    _TRISC3 043B                    _TRISC5 043D  
                  _SSPCON 0014                    _SSPBUF 0013            __CFG_PWRTE$OFF 0000  
            _AnalogRead_8 01C4                    saved_w 007E                 ?_ADConfig 0072  
 __end_of__initialization 0013            __pcstackCOMMON 0070                _banderaADC 007A  
              ??_ADConfig 0074                __pmaintext 016C             ADConfig@canal 0072  
              __pintentry 0004           ADConfig@oscFreq 0076                   _SSPSTAT 0094  
  AnalogRead_8@conversion 0075                 _ANSELbits 0188                   __ptext1 01C4  
                 __ptext2 0017                   __ptext3 00E1                   __ptext4 01E1  
            __size_of_ISR 0011      end_of_initialization 0013                 _TRISAbits 0085  
               _TRISEbits 0089         __size_of_ADConfig 00CA       start_initialization 000F  
             __end_of_ISR 01F2  __CFG_FOSC$INTRC_NOCLKOUT 0000             ?_ADC_CHselect 0070  
             __pbssCOMMON 0077                 ___latbits 0002             __pcstackBANK0 0020  
          ??_ADC_CHselect 0072                  _ADConfig 0017         interrupt_function 0004  
                _PIE1bits 008C                  _PIR1bits 000C             ?_AnalogRead_8 0070  
              _ADCON0bits 001F                _ADCON1bits 009F       ADConfig@justificado 0073  
          ??_AnalogRead_8 0072         __CFG_BOR4V$BOR40V 0000              _valorADC_CH0 0078  
            _valorADC_CH5 0079         ADC_CHselect@canal 0074      __end_of_ADC_CHselect 016C  
           __size_of_main 0058               _instruccion 0077                _INTCONbits 000B  
                intlevel1 0000          AnalogRead_8@just 0074      __end_of_AnalogRead_8 01E1  
