

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Sat Feb 15 18:25:21 2020

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	text6,local,class=CODE,merge=1,delta=2
    16                           	psect	intentry,global,class=CODE,delta=2
    17                           	dabs	1,0x7E,2
    18  0000                     
    19                           ; Version 2.05
    20                           ; Generated 20/12/2018 GMT
    21                           ; 
    22                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC16F887 Definitions
    51                           ; 
    52                           ; SFR Addresses
    53  0000                     	;# 
    54  0001                     	;# 
    55  0002                     	;# 
    56  0003                     	;# 
    57  0004                     	;# 
    58  0005                     	;# 
    59  0006                     	;# 
    60  0007                     	;# 
    61  0008                     	;# 
    62  0009                     	;# 
    63  000A                     	;# 
    64  000B                     	;# 
    65  000C                     	;# 
    66  000D                     	;# 
    67  000E                     	;# 
    68  000E                     	;# 
    69  000F                     	;# 
    70  0010                     	;# 
    71  0011                     	;# 
    72  0012                     	;# 
    73  0013                     	;# 
    74  0014                     	;# 
    75  0015                     	;# 
    76  0015                     	;# 
    77  0016                     	;# 
    78  0017                     	;# 
    79  0018                     	;# 
    80  0019                     	;# 
    81  001A                     	;# 
    82  001B                     	;# 
    83  001B                     	;# 
    84  001C                     	;# 
    85  001D                     	;# 
    86  001E                     	;# 
    87  001F                     	;# 
    88  0081                     	;# 
    89  0085                     	;# 
    90  0086                     	;# 
    91  0087                     	;# 
    92  0088                     	;# 
    93  0089                     	;# 
    94  008C                     	;# 
    95  008D                     	;# 
    96  008E                     	;# 
    97  008F                     	;# 
    98  0090                     	;# 
    99  0091                     	;# 
   100  0092                     	;# 
   101  0093                     	;# 
   102  0093                     	;# 
   103  0093                     	;# 
   104  0094                     	;# 
   105  0095                     	;# 
   106  0096                     	;# 
   107  0097                     	;# 
   108  0098                     	;# 
   109  0099                     	;# 
   110  009A                     	;# 
   111  009B                     	;# 
   112  009C                     	;# 
   113  009D                     	;# 
   114  009E                     	;# 
   115  009F                     	;# 
   116  0105                     	;# 
   117  0107                     	;# 
   118  0108                     	;# 
   119  0109                     	;# 
   120  010C                     	;# 
   121  010C                     	;# 
   122  010D                     	;# 
   123  010E                     	;# 
   124  010F                     	;# 
   125  0185                     	;# 
   126  0187                     	;# 
   127  0188                     	;# 
   128  0189                     	;# 
   129  018C                     	;# 
   130  018D                     	;# 
   131  0000                     	;# 
   132  0001                     	;# 
   133  0002                     	;# 
   134  0003                     	;# 
   135  0004                     	;# 
   136  0005                     	;# 
   137  0006                     	;# 
   138  0007                     	;# 
   139  0008                     	;# 
   140  0009                     	;# 
   141  000A                     	;# 
   142  000B                     	;# 
   143  000C                     	;# 
   144  000D                     	;# 
   145  000E                     	;# 
   146  000E                     	;# 
   147  000F                     	;# 
   148  0010                     	;# 
   149  0011                     	;# 
   150  0012                     	;# 
   151  0013                     	;# 
   152  0014                     	;# 
   153  0015                     	;# 
   154  0015                     	;# 
   155  0016                     	;# 
   156  0017                     	;# 
   157  0018                     	;# 
   158  0019                     	;# 
   159  001A                     	;# 
   160  001B                     	;# 
   161  001B                     	;# 
   162  001C                     	;# 
   163  001D                     	;# 
   164  001E                     	;# 
   165  001F                     	;# 
   166  0081                     	;# 
   167  0085                     	;# 
   168  0086                     	;# 
   169  0087                     	;# 
   170  0088                     	;# 
   171  0089                     	;# 
   172  008C                     	;# 
   173  008D                     	;# 
   174  008E                     	;# 
   175  008F                     	;# 
   176  0090                     	;# 
   177  0091                     	;# 
   178  0092                     	;# 
   179  0093                     	;# 
   180  0093                     	;# 
   181  0093                     	;# 
   182  0094                     	;# 
   183  0095                     	;# 
   184  0096                     	;# 
   185  0097                     	;# 
   186  0098                     	;# 
   187  0099                     	;# 
   188  009A                     	;# 
   189  009B                     	;# 
   190  009C                     	;# 
   191  009D                     	;# 
   192  009E                     	;# 
   193  009F                     	;# 
   194  0105                     	;# 
   195  0107                     	;# 
   196  0108                     	;# 
   197  0109                     	;# 
   198  010C                     	;# 
   199  010C                     	;# 
   200  010D                     	;# 
   201  010E                     	;# 
   202  010F                     	;# 
   203  0185                     	;# 
   204  0187                     	;# 
   205  0188                     	;# 
   206  0189                     	;# 
   207  018C                     	;# 
   208  018D                     	;# 
   209  0000                     	;# 
   210  0001                     	;# 
   211  0002                     	;# 
   212  0003                     	;# 
   213  0004                     	;# 
   214  0005                     	;# 
   215  0006                     	;# 
   216  0007                     	;# 
   217  0008                     	;# 
   218  0009                     	;# 
   219  000A                     	;# 
   220  000B                     	;# 
   221  000C                     	;# 
   222  000D                     	;# 
   223  000E                     	;# 
   224  000E                     	;# 
   225  000F                     	;# 
   226  0010                     	;# 
   227  0011                     	;# 
   228  0012                     	;# 
   229  0013                     	;# 
   230  0014                     	;# 
   231  0015                     	;# 
   232  0015                     	;# 
   233  0016                     	;# 
   234  0017                     	;# 
   235  0018                     	;# 
   236  0019                     	;# 
   237  001A                     	;# 
   238  001B                     	;# 
   239  001B                     	;# 
   240  001C                     	;# 
   241  001D                     	;# 
   242  001E                     	;# 
   243  001F                     	;# 
   244  0081                     	;# 
   245  0085                     	;# 
   246  0086                     	;# 
   247  0087                     	;# 
   248  0088                     	;# 
   249  0089                     	;# 
   250  008C                     	;# 
   251  008D                     	;# 
   252  008E                     	;# 
   253  008F                     	;# 
   254  0090                     	;# 
   255  0091                     	;# 
   256  0092                     	;# 
   257  0093                     	;# 
   258  0093                     	;# 
   259  0093                     	;# 
   260  0094                     	;# 
   261  0095                     	;# 
   262  0096                     	;# 
   263  0097                     	;# 
   264  0098                     	;# 
   265  0099                     	;# 
   266  009A                     	;# 
   267  009B                     	;# 
   268  009C                     	;# 
   269  009D                     	;# 
   270  009E                     	;# 
   271  009F                     	;# 
   272  0105                     	;# 
   273  0107                     	;# 
   274  0108                     	;# 
   275  0109                     	;# 
   276  010C                     	;# 
   277  010C                     	;# 
   278  010D                     	;# 
   279  010E                     	;# 
   280  010F                     	;# 
   281  0185                     	;# 
   282  0187                     	;# 
   283  0188                     	;# 
   284  0189                     	;# 
   285  018C                     	;# 
   286  018D                     	;# 
   287  0000                     	;# 
   288  0001                     	;# 
   289  0002                     	;# 
   290  0003                     	;# 
   291  0004                     	;# 
   292  0005                     	;# 
   293  0006                     	;# 
   294  0007                     	;# 
   295  0008                     	;# 
   296  0009                     	;# 
   297  000A                     	;# 
   298  000B                     	;# 
   299  000C                     	;# 
   300  000D                     	;# 
   301  000E                     	;# 
   302  000E                     	;# 
   303  000F                     	;# 
   304  0010                     	;# 
   305  0011                     	;# 
   306  0012                     	;# 
   307  0013                     	;# 
   308  0014                     	;# 
   309  0015                     	;# 
   310  0015                     	;# 
   311  0016                     	;# 
   312  0017                     	;# 
   313  0018                     	;# 
   314  0019                     	;# 
   315  001A                     	;# 
   316  001B                     	;# 
   317  001B                     	;# 
   318  001C                     	;# 
   319  001D                     	;# 
   320  001E                     	;# 
   321  001F                     	;# 
   322  0081                     	;# 
   323  0085                     	;# 
   324  0086                     	;# 
   325  0087                     	;# 
   326  0088                     	;# 
   327  0089                     	;# 
   328  008C                     	;# 
   329  008D                     	;# 
   330  008E                     	;# 
   331  008F                     	;# 
   332  0090                     	;# 
   333  0091                     	;# 
   334  0092                     	;# 
   335  0093                     	;# 
   336  0093                     	;# 
   337  0093                     	;# 
   338  0094                     	;# 
   339  0095                     	;# 
   340  0096                     	;# 
   341  0097                     	;# 
   342  0098                     	;# 
   343  0099                     	;# 
   344  009A                     	;# 
   345  009B                     	;# 
   346  009C                     	;# 
   347  009D                     	;# 
   348  009E                     	;# 
   349  009F                     	;# 
   350  0105                     	;# 
   351  0107                     	;# 
   352  0108                     	;# 
   353  0109                     	;# 
   354  010C                     	;# 
   355  010C                     	;# 
   356  010D                     	;# 
   357  010E                     	;# 
   358  010F                     	;# 
   359  0185                     	;# 
   360  0187                     	;# 
   361  0188                     	;# 
   362  0189                     	;# 
   363  018C                     	;# 
   364  018D                     	;# 
   365  0014                     _SSPCON	set	20
   366  001E                     _ADRESH	set	30
   367  000B                     _INTCONbits	set	11
   368  0013                     _SSPBUF	set	19
   369  000C                     _PIR1bits	set	12
   370  001F                     _ADCON0bits	set	31
   371  0066                     _ADIF	set	102
   372  0094                     _SSPSTATbits	set	148
   373  0094                     _SSPSTAT	set	148
   374  009E                     _ADRESL	set	158
   375  0089                     _TRISEbits	set	137
   376  0085                     _TRISAbits	set	133
   377  009F                     _ADCON1bits	set	159
   378  008C                     _PIE1bits	set	140
   379  043B                     _TRISC3	set	1083
   380  043D                     _TRISC5	set	1085
   381  04A0                     _BF	set	1184
   382  0466                     _ADIE	set	1126
   383  0188                     _ANSELbits	set	392
   384                           
   385                           ; #config settings
   386  0000                     
   387                           	psect	cinit
   388  000F                     start_initialization:	
   389  000F                     __initialization:	
   390                           
   391                           ; Clear objects allocated to COMMON
   392  000F  01F7               	clrf	__pbssCOMMON& (0+127)
   393  0010  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
   394  0011  01F9               	clrf	(__pbssCOMMON+2)& (0+127)
   395  0012  01FA               	clrf	(__pbssCOMMON+3)& (0+127)
   396                           
   397                           ; Clear objects allocated to BANK0
   398  0013  1283               	bcf	3,5	;RP0=0, select bank0
   399  0014  1303               	bcf	3,6	;RP1=0, select bank0
   400  0015  01A3               	clrf	__pbssBANK0& (0+127)
   401  0016                     end_of_initialization:	
   402                           ;End of C runtime variable initialization code
   403                           
   404  0016                     __end_of__initialization:	
   405  0016  0183               	clrf	3
   406  0017  120A  118A  28E4   	ljmp	_main	;jump to C main() function
   407                           
   408                           	psect	bssCOMMON
   409  0077                     __pbssCOMMON:	
   410  0077                     _bandera_recibido:	
   411  0077                     	ds	1
   412  0078                     _instruccion:	
   413  0078                     	ds	1
   414  0079                     _valorADC_CH0:	
   415  0079                     	ds	1
   416  007A                     _valorADC_CH5:	
   417  007A                     	ds	1
   418                           
   419                           	psect	bssBANK0
   420  0023                     __pbssBANK0:	
   421  0023                     _banderaADC:	
   422  0023                     	ds	1
   423                           
   424                           	psect	cstackCOMMON
   425  0070                     __pcstackCOMMON:	
   426  0070                     ?_AnalogRead_8:	
   427  0070                     ?_ADC_CHselect:	
   428                           ; 1 bytes @ 0x0
   429                           
   430  0070                     ?_SPI_write:	
   431                           ; 1 bytes @ 0x0
   432                           
   433  0070                     ?_ISR:	
   434                           ; 1 bytes @ 0x0
   435                           
   436  0070                     ??_ISR:	
   437                           ; 1 bytes @ 0x0
   438                           
   439  0070                     ?_main:	
   440                           ; 1 bytes @ 0x0
   441                           
   442                           
   443                           ; 1 bytes @ 0x0
   444  0070                     	ds	2
   445  0072                     ?_ADConfig:	
   446  0072                     ?_SPI_init:	
   447                           ; 1 bytes @ 0x2
   448                           
   449  0072                     ??_AnalogRead_8:	
   450                           ; 1 bytes @ 0x2
   451                           
   452  0072                     ??_ADC_CHselect:	
   453                           ; 1 bytes @ 0x2
   454                           
   455  0072                     ??_SPI_write:	
   456                           ; 1 bytes @ 0x2
   457                           
   458  0072                     ADConfig@canal:	
   459                           ; 1 bytes @ 0x2
   460                           
   461  0072                     SPI_init@muestra:	
   462                           ; 1 bytes @ 0x2
   463                           
   464  0072                     SPI_write@dato:	
   465                           ; 1 bytes @ 0x2
   466                           
   467                           
   468                           ; 1 bytes @ 0x2
   469  0072                     	ds	1
   470  0073                     ADConfig@justificado:	
   471  0073                     SPI_init@idle:	
   472                           ; 1 bytes @ 0x3
   473                           
   474                           
   475                           ; 1 bytes @ 0x3
   476  0073                     	ds	1
   477  0074                     ??_ADConfig:	
   478  0074                     AnalogRead_8@just:	
   479                           ; 1 bytes @ 0x4
   480                           
   481  0074                     ADC_CHselect@canal:	
   482                           ; 1 bytes @ 0x4
   483                           
   484  0074                     SPI_init@edge:	
   485                           ; 1 bytes @ 0x4
   486                           
   487                           
   488                           ; 1 bytes @ 0x4
   489  0074                     	ds	1
   490  0075                     ??_SPI_init:	
   491  0075                     AnalogRead_8@conversion:	
   492                           ; 1 bytes @ 0x5
   493                           
   494  0075                     SPI_init@modo:	
   495                           ; 1 bytes @ 0x5
   496                           
   497                           
   498                           ; 1 bytes @ 0x5
   499  0075                     	ds	1
   500  0076                     ADConfig@oscFreq:	
   501                           
   502                           ; 1 bytes @ 0x6
   503  0076                     	ds	1
   504                           
   505                           	psect	cstackBANK0
   506  0020                     __pcstackBANK0:	
   507  0020                     ??_main:	
   508                           
   509                           ; 1 bytes @ 0x0
   510  0020                     	ds	3
   511                           
   512                           	psect	maintext
   513  00E4                     __pmaintext:	
   514 ;;
   515 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   516 ;;
   517 ;; *************** function _main *****************
   518 ;; Defined at:
   519 ;;		line 43 in file "SlaveMain.c"
   520 ;; Parameters:    Size  Location     Type
   521 ;;		None
   522 ;; Auto vars:     Size  Location     Type
   523 ;;		None
   524 ;; Return value:  Size  Location     Type
   525 ;;                  1    wreg      void 
   526 ;; Registers used:
   527 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   528 ;; Tracked objects:
   529 ;;		On entry : B00/0
   530 ;;		On exit  : 0/0
   531 ;;		Unchanged: 0/0
   532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   533 ;;      Params:         0       0       0       0       0
   534 ;;      Locals:         0       0       0       0       0
   535 ;;      Temps:          0       3       0       0       0
   536 ;;      Totals:         0       3       0       0       0
   537 ;;Total ram usage:        3 bytes
   538 ;; Hardware stack levels required when called:    2
   539 ;; This function calls:
   540 ;;		_ADC_CHselect
   541 ;;		_ADConfig
   542 ;;		_AnalogRead_8
   543 ;;		_SPI_init
   544 ;;		_SPI_write
   545 ;; This function is called by:
   546 ;;		Startup code after reset
   547 ;; This function uses a non-reentrant model
   548 ;;
   549                           
   550                           
   551                           ;psect for function _main
   552  00E4                     _main:	
   553                           
   554                           ;SlaveMain.c: 44:     ADConfig(4,0,'H');
   555                           
   556                           ;incstack = 0
   557                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   558  00E4  01F2               	clrf	ADConfig@canal
   559  00E5  3048               	movlw	72
   560  00E6  1283               	bcf	3,5	;RP0=0, select bank0
   561  00E7  1303               	bcf	3,6	;RP1=0, select bank0
   562  00E8  00A0               	movwf	??_main
   563  00E9  0820               	movf	??_main,w
   564  00EA  00F3               	movwf	ADConfig@justificado
   565  00EB  3004               	movlw	4
   566  00EC  120A  118A  201A  120A  118A  	fcall	_ADConfig
   567                           
   568                           ;SlaveMain.c: 45:     SPI_init(SPI_SLAVE_SS_DI,SPI_SAMPLE_MID,SPI_CLK_IDLE_LOW,SPI_IDLE_
      +                          TO_ACTIVE);
   569  00F1  01F2               	clrf	SPI_init@muestra
   570  00F2  01F3               	clrf	SPI_init@idle
   571  00F3  01F4               	clrf	SPI_init@edge
   572  00F4  3025               	movlw	37
   573  00F5  120A  118A  2237  120A  118A  	fcall	_SPI_init
   574  00FA                     l1442:	
   575                           
   576                           ;SlaveMain.c: 47:         if(banderaADC){
   577  00FA  1283               	bcf	3,5	;RP0=0, select bank0
   578  00FB  1303               	bcf	3,6	;RP1=0, select bank0
   579  00FC  0823               	movf	_banderaADC,w
   580  00FD  1D03               	btfss	3,2
   581  00FE  2927               	goto	l1452
   582  00FF  2944               	goto	l1462
   583  0100                     l1446:	
   584                           
   585                           ;SlaveMain.c: 50:                     valorADC_CH5 = AnalogRead_8('H');
   586  0100  3048               	movlw	72
   587  0101  120A  118A  2204  120A  118A  	fcall	_AnalogRead_8
   588  0106  1283               	bcf	3,5	;RP0=0, select bank0
   589  0107  1303               	bcf	3,6	;RP1=0, select bank0
   590  0108  00A0               	movwf	??_main
   591  0109  0820               	movf	??_main,w
   592  010A  00FA               	movwf	_valorADC_CH5
   593                           
   594                           ;SlaveMain.c: 51:                     ADC_CHselect(0);
   595  010B  3000               	movlw	0
   596  010C  120A  118A  2179  120A  118A  	fcall	_ADC_CHselect
   597                           
   598                           ;SlaveMain.c: 52:                     break;
   599  0111  293A               	goto	l1454
   600  0112                     l1448:	
   601                           
   602                           ;SlaveMain.c: 54:                     valorADC_CH0 = AnalogRead_8('H');
   603  0112  3048               	movlw	72
   604  0113  120A  118A  2204  120A  118A  	fcall	_AnalogRead_8
   605  0118  1283               	bcf	3,5	;RP0=0, select bank0
   606  0119  1303               	bcf	3,6	;RP1=0, select bank0
   607  011A  00A0               	movwf	??_main
   608  011B  0820               	movf	??_main,w
   609  011C  00F9               	movwf	_valorADC_CH0
   610                           
   611                           ;SlaveMain.c: 55:                     ADC_CHselect(5);
   612  011D  3005               	movlw	5
   613  011E  120A  118A  2179  120A  118A  	fcall	_ADC_CHselect
   614                           
   615                           ;SlaveMain.c: 56:                     break;
   616  0123  293A               	goto	l1454
   617  0124                     l1450:	
   618                           
   619                           ;SlaveMain.c: 58:                     valorADC_CH0 = 0;
   620  0124  01F9               	clrf	_valorADC_CH0
   621                           
   622                           ;SlaveMain.c: 59:                     valorADC_CH5 = 0;
   623  0125  01FA               	clrf	_valorADC_CH5
   624                           
   625                           ;SlaveMain.c: 60:             }
   626  0126  293A               	goto	l1454
   627  0127                     l1452:	
   628  0127  0C1F               	rrf	31,w	;volatile
   629  0128  00A0               	movwf	??_main
   630  0129  0C20               	rrf	??_main,w
   631  012A  390F               	andlw	15
   632  012B  00A1               	movwf	??_main+1
   633  012C  01A2               	clrf	??_main+2
   634                           
   635                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   636                           ; Switch size 1, requested type "simple"
   637                           ; Number of cases is 1, Range of values is 0 to 0
   638                           ; switch strategies available:
   639                           ; Name         Instructions Cycles
   640                           ; simple_byte            4     3 (average)
   641                           ; direct_byte           11     8 (fixed)
   642                           ; jumptable            260     6 (fixed)
   643                           ;	Chosen strategy is simple_byte
   644  012D  0822               	movf	??_main+2,w
   645  012E  3A00               	xorlw	0	; case 0
   646  012F  1903               	skipnz
   647  0130  2932               	goto	l1660
   648  0131  2924               	goto	l1450
   649  0132                     l1660:	
   650                           
   651                           ; Switch size 1, requested type "simple"
   652                           ; Number of cases is 2, Range of values is 0 to 5
   653                           ; switch strategies available:
   654                           ; Name         Instructions Cycles
   655                           ; simple_byte            7     4 (average)
   656                           ; direct_byte           26     8 (fixed)
   657                           ; jumptable            260     6 (fixed)
   658                           ;	Chosen strategy is simple_byte
   659  0132  0821               	movf	??_main+1,w
   660  0133  3A00               	xorlw	0	; case 0
   661  0134  1903               	skipnz
   662  0135  2912               	goto	l1448
   663  0136  3A05               	xorlw	5	; case 5
   664  0137  1903               	skipnz
   665  0138  2900               	goto	l1446
   666  0139  2924               	goto	l1450
   667  013A                     l1454:	
   668                           
   669                           ;SlaveMain.c: 62:             banderaADC = 0;
   670  013A  1283               	bcf	3,5	;RP0=0, select bank0
   671  013B  1303               	bcf	3,6	;RP1=0, select bank0
   672  013C  01A3               	clrf	_banderaADC
   673                           
   674                           ;SlaveMain.c: 63:             PIE1bits.ADIE = 1;
   675  013D  1683               	bsf	3,5	;RP0=1, select bank1
   676  013E  1303               	bcf	3,6	;RP1=0, select bank1
   677  013F  170C               	bsf	12,6	;volatile
   678                           
   679                           ;SlaveMain.c: 64:             PIR1bits.ADIF = 0;
   680  0140  1283               	bcf	3,5	;RP0=0, select bank0
   681  0141  1303               	bcf	3,6	;RP1=0, select bank0
   682  0142  130C               	bcf	12,6	;volatile
   683                           
   684                           ;SlaveMain.c: 65:             ADCON0bits.GO_nDONE = 1;
   685  0143  149F               	bsf	31,1	;volatile
   686  0144                     l1462:	
   687                           
   688                           ;SlaveMain.c: 68:         if(BF){
   689  0144  1683               	bsf	3,5	;RP0=1, select bank1
   690  0145  1303               	bcf	3,6	;RP1=0, select bank1
   691  0146  1C14               	btfss	20,0	;volatile
   692  0147  2950               	goto	l1468
   693                           
   694                           ;SlaveMain.c: 69:             instruccion = SSPBUF;
   695  0148  1283               	bcf	3,5	;RP0=0, select bank0
   696  0149  1303               	bcf	3,6	;RP1=0, select bank0
   697  014A  0813               	movf	19,w	;volatile
   698  014B  00A0               	movwf	??_main
   699  014C  0820               	movf	??_main,w
   700  014D  00F8               	movwf	_instruccion
   701                           
   702                           ;SlaveMain.c: 70:             bandera_recibido = 1;
   703  014E  01F7               	clrf	_bandera_recibido
   704  014F  0AF7               	incf	_bandera_recibido,f
   705  0150                     l1468:	
   706                           
   707                           ;SlaveMain.c: 73:         if(bandera_recibido){
   708  0150  0877               	movf	_bandera_recibido,w
   709  0151  1D03               	btfss	3,2
   710  0152  2966               	goto	l1484
   711  0153  28FA               	goto	l1442
   712  0154                     l1472:	
   713                           
   714                           ;SlaveMain.c: 76:                     SPI_write(valorADC_CH0);
   715  0154  0879               	movf	_valorADC_CH0,w
   716  0155                     L1:	
   717  0155  120A  118A  224B  120A  118A  	fcall	_SPI_write
   718                           
   719                           ;SlaveMain.c: 77:                     _delay((unsigned long)((500)*(4000000/4000000.0)))
      +                          ;
   720  015A  30A5               	movlw	165
   721  015B  1283               	bcf	3,5	;RP0=0, select bank0
   722  015C  1303               	bcf	3,6	;RP1=0, select bank0
   723  015D  00A0               	movwf	??_main
   724  015E                     u177:	
   725  015E  0BA0               	decfsz	??_main,f
   726  015F  295E               	goto	u177
   727  0160  2961               	nop2
   728                           
   729                           ;SlaveMain.c: 78:                     break;
   730  0161  2977               	goto	l1486
   731  0162                     l1476:	
   732                           
   733                           ;SlaveMain.c: 80:                     SPI_write(valorADC_CH5);
   734  0162  087A               	movf	_valorADC_CH5,w
   735  0163  2955               	goto	L1
   736  0164                     l1480:	
   737                           
   738                           ;SlaveMain.c: 84:                     SPI_write(0);
   739  0164  3000               	movlw	0
   740  0165  2955               	goto	L1
   741  0166                     l1484:	
   742  0166  0878               	movf	_instruccion,w
   743  0167  1283               	bcf	3,5	;RP0=0, select bank0
   744  0168  00A0               	movwf	??_main
   745  0169  01A1               	clrf	??_main+1
   746                           
   747                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   748                           ; Switch size 1, requested type "simple"
   749                           ; Number of cases is 1, Range of values is 0 to 0
   750                           ; switch strategies available:
   751                           ; Name         Instructions Cycles
   752                           ; simple_byte            4     3 (average)
   753                           ; direct_byte           11     8 (fixed)
   754                           ; jumptable            260     6 (fixed)
   755                           ;	Chosen strategy is simple_byte
   756  016A  0821               	movf	??_main+1,w
   757  016B  3A00               	xorlw	0	; case 0
   758  016C  1903               	skipnz
   759  016D  296F               	goto	l1662
   760  016E  2964               	goto	l1480
   761  016F                     l1662:	
   762                           
   763                           ; Switch size 1, requested type "simple"
   764                           ; Number of cases is 2, Range of values is 22 to 66
   765                           ; switch strategies available:
   766                           ; Name         Instructions Cycles
   767                           ; simple_byte            7     4 (average)
   768                           ; direct_byte          146    11 (fixed)
   769                           ; jumptable            263     9 (fixed)
   770                           ;	Chosen strategy is simple_byte
   771  016F  0820               	movf	??_main,w
   772  0170  3A16               	xorlw	22	; case 22
   773  0171  1903               	skipnz
   774  0172  2954               	goto	l1472
   775  0173  3A54               	xorlw	84	; case 66
   776  0174  1903               	skipnz
   777  0175  2962               	goto	l1476
   778  0176  2964               	goto	l1480
   779  0177                     l1486:	
   780                           
   781                           ;SlaveMain.c: 87:             bandera_recibido = 0;
   782  0177  01F7               	clrf	_bandera_recibido
   783  0178  28FA               	goto	l1442
   784  0179                     __end_of_main:	
   785                           
   786                           	psect	text1
   787  024B                     __ptext1:	
   788 ;; *************** function _SPI_write *****************
   789 ;; Defined at:
   790 ;;		line 28 in file "SPI.c"
   791 ;; Parameters:    Size  Location     Type
   792 ;;  dato            1    wreg     unsigned char 
   793 ;; Auto vars:     Size  Location     Type
   794 ;;  dato            1    2[COMMON] unsigned char 
   795 ;; Return value:  Size  Location     Type
   796 ;;                  1    wreg      void 
   797 ;; Registers used:
   798 ;;		wreg
   799 ;; Tracked objects:
   800 ;;		On entry : 0/0
   801 ;;		On exit  : 0/0
   802 ;;		Unchanged: 0/0
   803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   804 ;;      Params:         0       0       0       0       0
   805 ;;      Locals:         1       0       0       0       0
   806 ;;      Temps:          0       0       0       0       0
   807 ;;      Totals:         1       0       0       0       0
   808 ;;Total ram usage:        1 bytes
   809 ;; Hardware stack levels used:    1
   810 ;; Hardware stack levels required when called:    1
   811 ;; This function calls:
   812 ;;		Nothing
   813 ;; This function is called by:
   814 ;;		_main
   815 ;; This function uses a non-reentrant model
   816 ;;
   817                           
   818                           
   819                           ;psect for function _SPI_write
   820  024B                     _SPI_write:	
   821                           
   822                           ;incstack = 0
   823                           ; Regs used in _SPI_write: [wreg]
   824                           ;SPI_write@dato stored from wreg
   825  024B  00F2               	movwf	SPI_write@dato
   826                           
   827                           ;SPI.c: 29:     SSPBUF = dato;
   828  024C  0872               	movf	SPI_write@dato,w
   829  024D  1283               	bcf	3,5	;RP0=0, select bank0
   830  024E  1303               	bcf	3,6	;RP1=0, select bank0
   831  024F  0093               	movwf	19	;volatile
   832  0250  0008               	return
   833  0251                     __end_of_SPI_write:	
   834                           
   835                           	psect	text2
   836  0237                     __ptext2:	
   837 ;; *************** function _SPI_init *****************
   838 ;; Defined at:
   839 ;;		line 14 in file "SPI.c"
   840 ;; Parameters:    Size  Location     Type
   841 ;;  modo            1    wreg     enum E1292
   842 ;;  muestra         1    2[COMMON] enum E1300
   843 ;;  idle            1    3[COMMON] enum E1304
   844 ;;  edge            1    4[COMMON] enum E1308
   845 ;; Auto vars:     Size  Location     Type
   846 ;;  modo            1    5[COMMON] enum E1292
   847 ;; Return value:  Size  Location     Type
   848 ;;                  1    wreg      void 
   849 ;; Registers used:
   850 ;;		wreg, status,2, status,0
   851 ;; Tracked objects:
   852 ;;		On entry : 0/0
   853 ;;		On exit  : 0/0
   854 ;;		Unchanged: 0/0
   855 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   856 ;;      Params:         3       0       0       0       0
   857 ;;      Locals:         1       0       0       0       0
   858 ;;      Temps:          0       0       0       0       0
   859 ;;      Totals:         4       0       0       0       0
   860 ;;Total ram usage:        4 bytes
   861 ;; Hardware stack levels used:    1
   862 ;; Hardware stack levels required when called:    1
   863 ;; This function calls:
   864 ;;		Nothing
   865 ;; This function is called by:
   866 ;;		_main
   867 ;; This function uses a non-reentrant model
   868 ;;
   869                           
   870                           
   871                           ;psect for function _SPI_init
   872  0237                     _SPI_init:	
   873                           
   874                           ;incstack = 0
   875                           ; Regs used in _SPI_init: [wreg+status,2+status,0]
   876                           ;SPI_init@modo stored from wreg
   877  0237  00F5               	movwf	SPI_init@modo
   878                           
   879                           ;SPI.c: 14: void SPI_init(spi_modo modo, spi_sample muestra, spi_clk_idle idle,;SPI.c: 1
      +                          5:               spi_transmit_edge edge){;SPI.c: 16:     TRISC5 = 0;
   880  0238  1683               	bsf	3,5	;RP0=1, select bank1
   881  0239  1303               	bcf	3,6	;RP1=0, select bank1
   882  023A  1287               	bcf	7,5	;volatile
   883                           
   884                           ;SPI.c: 17:     if (modo & 0x04){
   885  023B  1D75               	btfss	SPI_init@modo,2
   886  023C  2A41               	goto	l1160
   887                           
   888                           ;SPI.c: 18:         SSPSTAT = edge;
   889  023D  0874               	movf	SPI_init@edge,w
   890  023E  0094               	movwf	20	;volatile
   891                           
   892                           ;SPI.c: 19:         TRISC3 = 1;
   893  023F  1587               	bsf	7,3	;volatile
   894                           
   895                           ;SPI.c: 20:     }
   896  0240  2A45               	goto	l150
   897  0241                     l1160:	
   898                           
   899                           ;SPI.c: 22:         SSPSTAT = muestra | edge;
   900  0241  0872               	movf	SPI_init@muestra,w
   901  0242  0474               	iorwf	SPI_init@edge,w
   902  0243  0094               	movwf	20	;volatile
   903                           
   904                           ;SPI.c: 23:         TRISC3 = 0;
   905  0244  1187               	bcf	7,3	;volatile
   906  0245                     l150:	
   907                           ;SPI.c: 24:     }
   908                           
   909                           
   910                           ;SPI.c: 25:     SSPCON = modo | idle;
   911  0245  0875               	movf	SPI_init@modo,w
   912  0246  0473               	iorwf	SPI_init@idle,w
   913  0247  1283               	bcf	3,5	;RP0=0, select bank0
   914  0248  1303               	bcf	3,6	;RP1=0, select bank0
   915  0249  0094               	movwf	20	;volatile
   916  024A  0008               	return
   917  024B                     __end_of_SPI_init:	
   918                           
   919                           	psect	text3
   920  0204                     __ptext3:	
   921 ;; *************** function _AnalogRead_8 *****************
   922 ;; Defined at:
   923 ;;		line 97 in file "ADC.c"
   924 ;; Parameters:    Size  Location     Type
   925 ;;  just            1    wreg     unsigned char 
   926 ;; Auto vars:     Size  Location     Type
   927 ;;  just            1    4[COMMON] unsigned char 
   928 ;;  conversion      1    5[COMMON] unsigned char 
   929 ;; Return value:  Size  Location     Type
   930 ;;                  1    wreg      unsigned char 
   931 ;; Registers used:
   932 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   933 ;; Tracked objects:
   934 ;;		On entry : 0/0
   935 ;;		On exit  : 0/0
   936 ;;		Unchanged: 0/0
   937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   938 ;;      Params:         0       0       0       0       0
   939 ;;      Locals:         2       0       0       0       0
   940 ;;      Temps:          2       0       0       0       0
   941 ;;      Totals:         4       0       0       0       0
   942 ;;Total ram usage:        4 bytes
   943 ;; Hardware stack levels used:    1
   944 ;; Hardware stack levels required when called:    1
   945 ;; This function calls:
   946 ;;		Nothing
   947 ;; This function is called by:
   948 ;;		_main
   949 ;; This function uses a non-reentrant model
   950 ;;
   951                           
   952                           
   953                           ;psect for function _AnalogRead_8
   954  0204                     _AnalogRead_8:	
   955                           
   956                           ;incstack = 0
   957                           ; Regs used in _AnalogRead_8: [wreg-fsr0h+status,2+status,0]
   958                           ;AnalogRead_8@just stored from wreg
   959  0204  00F4               	movwf	AnalogRead_8@just
   960                           
   961                           ;ADC.c: 99:     switch (just){
   962  0205  2A0F               	goto	l1172
   963  0206                     l1166:	
   964                           
   965                           ;ADC.c: 101:             conversion = ADRESH;
   966  0206  1283               	bcf	3,5	;RP0=0, select bank0
   967  0207  2A09               	goto	L2
   968  0208                     l1168:	
   969                           ;ADC.c: 102:             break;
   970                           
   971                           
   972                           ;ADC.c: 104:             conversion = ADRESL;
   973  0208  1683               	bsf	3,5	;RP0=1, select bank1
   974  0209                     L2:	
   975  0209  1303               	bcf	3,6	;RP1=0, select bank1
   976  020A  081E               	movf	30,w	;volatile
   977  020B  00F2               	movwf	??_AnalogRead_8
   978  020C  0872               	movf	??_AnalogRead_8,w
   979  020D  00F5               	movwf	AnalogRead_8@conversion
   980                           
   981                           ;ADC.c: 105:             break;
   982  020E  2A1F               	goto	l1174
   983  020F                     l1172:	
   984  020F  0874               	movf	AnalogRead_8@just,w
   985  0210  00F2               	movwf	??_AnalogRead_8
   986  0211  01F3               	clrf	??_AnalogRead_8+1
   987                           
   988                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   989                           ; Switch size 1, requested type "simple"
   990                           ; Number of cases is 1, Range of values is 0 to 0
   991                           ; switch strategies available:
   992                           ; Name         Instructions Cycles
   993                           ; simple_byte            4     3 (average)
   994                           ; direct_byte           11     8 (fixed)
   995                           ; jumptable            260     6 (fixed)
   996                           ;	Chosen strategy is simple_byte
   997  0212  0873               	movf	??_AnalogRead_8+1,w
   998  0213  3A00               	xorlw	0	; case 0
   999  0214  1903               	skipnz
  1000  0215  2A17               	goto	l1664
  1001  0216  2A06               	goto	l1166
  1002  0217                     l1664:	
  1003                           
  1004                           ; Switch size 1, requested type "simple"
  1005                           ; Number of cases is 2, Range of values is 72 to 76
  1006                           ; switch strategies available:
  1007                           ; Name         Instructions Cycles
  1008                           ; simple_byte            7     4 (average)
  1009                           ; direct_byte           26    11 (fixed)
  1010                           ; jumptable            263     9 (fixed)
  1011                           ;	Chosen strategy is simple_byte
  1012  0217  0872               	movf	??_AnalogRead_8,w
  1013  0218  3A48               	xorlw	72	; case 72
  1014  0219  1903               	skipnz
  1015  021A  2A06               	goto	l1166
  1016  021B  3A04               	xorlw	4	; case 76
  1017  021C  1903               	skipnz
  1018  021D  2A08               	goto	l1168
  1019  021E  2A06               	goto	l1166
  1020  021F                     l1174:	
  1021                           
  1022                           ;ADC.c: 109:     return (conversion);
  1023  021F  0875               	movf	AnalogRead_8@conversion,w
  1024  0220  0008               	return
  1025  0221                     __end_of_AnalogRead_8:	
  1026                           
  1027                           	psect	text4
  1028  001A                     __ptext4:	
  1029 ;; *************** function _ADConfig *****************
  1030 ;; Defined at:
  1031 ;;		line 16 in file "ADC.c"
  1032 ;; Parameters:    Size  Location     Type
  1033 ;;  oscFreq         1    wreg     unsigned char 
  1034 ;;  canal           1    2[COMMON] unsigned char 
  1035 ;;  justificado     1    3[COMMON] unsigned char 
  1036 ;; Auto vars:     Size  Location     Type
  1037 ;;  oscFreq         1    6[COMMON] unsigned char 
  1038 ;; Return value:  Size  Location     Type
  1039 ;;                  1    wreg      void 
  1040 ;; Registers used:
  1041 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1042 ;; Tracked objects:
  1043 ;;		On entry : 0/0
  1044 ;;		On exit  : 0/0
  1045 ;;		Unchanged: 0/0
  1046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1047 ;;      Params:         2       0       0       0       0
  1048 ;;      Locals:         1       0       0       0       0
  1049 ;;      Temps:          2       0       0       0       0
  1050 ;;      Totals:         5       0       0       0       0
  1051 ;;Total ram usage:        5 bytes
  1052 ;; Hardware stack levels used:    1
  1053 ;; Hardware stack levels required when called:    1
  1054 ;; This function calls:
  1055 ;;		Nothing
  1056 ;; This function is called by:
  1057 ;;		_main
  1058 ;; This function uses a non-reentrant model
  1059 ;;
  1060                           
  1061                           
  1062                           ;psect for function _ADConfig
  1063  001A                     _ADConfig:	
  1064                           
  1065                           ;incstack = 0
  1066                           ; Regs used in _ADConfig: [wreg-fsr0h+status,2+status,0]
  1067                           ;ADConfig@oscFreq stored from wreg
  1068  001A  00F6               	movwf	ADConfig@oscFreq
  1069                           
  1070                           ;ADC.c: 17:     switch(oscFreq){
  1071  001B  2834               	goto	l1114
  1072  001C                     l1104:	
  1073                           
  1074                           ;ADC.c: 19:             ADCON0bits.ADCS = 0b00;
  1075  001C  303F               	movlw	-193
  1076  001D  1283               	bcf	3,5	;RP0=0, select bank0
  1077  001E  1303               	bcf	3,6	;RP1=0, select bank0
  1078  001F  059F               	andwf	31,f	;volatile
  1079                           
  1080                           ;ADC.c: 20:             break;
  1081  0020  2853               	goto	l1116
  1082  0021                     l1106:	
  1083  0021  282D               	goto	l1112
  1084  0022                     l1108:	
  1085                           ;ADC.c: 23:             break;
  1086                           
  1087                           ;ADC.c: 22:             ADCON0bits.ADCS = 0b01;
  1088                           
  1089                           
  1090                           ;ADC.c: 25:             ADCON0bits.ADCS = 0b10;
  1091  0022  1283               	bcf	3,5	;RP0=0, select bank0
  1092  0023  1303               	bcf	3,6	;RP1=0, select bank0
  1093  0024  081F               	movf	31,w	;volatile
  1094  0025  393F               	andlw	-193
  1095  0026  3880               	iorlw	128
  1096  0027  2832               	goto	L4
  1097  0028                     l1110:	
  1098                           ;ADC.c: 26:             break;
  1099                           
  1100                           
  1101                           ;ADC.c: 28:             ADCON0bits.ADCS = 0b11;
  1102  0028  30C0               	movlw	192
  1103  0029  1283               	bcf	3,5	;RP0=0, select bank0
  1104  002A  1303               	bcf	3,6	;RP1=0, select bank0
  1105  002B  049F               	iorwf	31,f	;volatile
  1106                           
  1107                           ;ADC.c: 29:             break;
  1108  002C  2853               	goto	l1116
  1109  002D                     l1112:	
  1110                           
  1111                           ;ADC.c: 31:             ADCON0bits.ADCS = 0b01;
  1112  002D  1283               	bcf	3,5	;RP0=0, select bank0
  1113  002E  1303               	bcf	3,6	;RP1=0, select bank0
  1114  002F  081F               	movf	31,w	;volatile
  1115  0030  393F               	andlw	-193
  1116  0031  3840               	iorlw	64
  1117  0032                     L4:	
  1118  0032  009F               	movwf	31	;volatile
  1119                           
  1120                           ;ADC.c: 32:     }
  1121  0033  2853               	goto	l1116
  1122  0034                     l1114:	
  1123  0034  0876               	movf	ADConfig@oscFreq,w
  1124  0035  00F4               	movwf	??_ADConfig
  1125  0036  01F5               	clrf	??_ADConfig+1
  1126                           
  1127                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1128                           ; Switch size 1, requested type "simple"
  1129                           ; Number of cases is 1, Range of values is 0 to 0
  1130                           ; switch strategies available:
  1131                           ; Name         Instructions Cycles
  1132                           ; simple_byte            4     3 (average)
  1133                           ; direct_byte           11     8 (fixed)
  1134                           ; jumptable            260     6 (fixed)
  1135                           ;	Chosen strategy is simple_byte
  1136  0037  0875               	movf	??_ADConfig+1,w
  1137  0038  3A00               	xorlw	0	; case 0
  1138  0039  1903               	skipnz
  1139  003A  283C               	goto	l1666
  1140  003B  282D               	goto	l1112
  1141  003C                     l1666:	
  1142                           
  1143                           ; Switch size 1, requested type "simple"
  1144                           ; Number of cases is 4, Range of values is 1 to 20
  1145                           ; switch strategies available:
  1146                           ; Name         Instructions Cycles
  1147                           ; simple_byte           13     7 (average)
  1148                           ; direct_byte           71    11 (fixed)
  1149                           ; jumptable            263     9 (fixed)
  1150                           ;	Chosen strategy is simple_byte
  1151  003C  0874               	movf	??_ADConfig,w
  1152  003D  3A01               	xorlw	1	; case 1
  1153  003E  1903               	skipnz
  1154  003F  281C               	goto	l1104
  1155  0040  3A05               	xorlw	5	; case 4
  1156  0041  1903               	skipnz
  1157  0042  2821               	goto	l1106
  1158  0043  3A0C               	xorlw	12	; case 8
  1159  0044  1903               	skipnz
  1160  0045  2822               	goto	l1108
  1161  0046  3A1C               	xorlw	28	; case 20
  1162  0047  1903               	skipnz
  1163  0048  2828               	goto	l1110
  1164  0049  282D               	goto	l1112
  1165  004A                     l96:	
  1166                           ;ADC.c: 34:         case 'H':
  1167                           
  1168  004A  284F               	goto	l99
  1169  004B                     l98:	
  1170                           ;ADC.c: 37:         case 'L':
  1171                           
  1172                           ;ADC.c: 36:             break;
  1173                           
  1174                           ;ADC.c: 35:             ADCON1bits.ADFM = 0;
  1175                           
  1176                           
  1177                           ;ADC.c: 38:             ADCON1bits.ADFM = 1;
  1178  004B  1683               	bsf	3,5	;RP0=1, select bank1
  1179  004C  1303               	bcf	3,6	;RP1=0, select bank1
  1180  004D  179F               	bsf	31,7	;volatile
  1181                           
  1182                           ;ADC.c: 39:             break;
  1183  004E  28AE               	goto	l1136
  1184  004F                     l99:	
  1185                           ;ADC.c: 40:         default:
  1186                           
  1187                           
  1188                           ;ADC.c: 41:             ADCON1bits.ADFM = 0;
  1189  004F  1683               	bsf	3,5	;RP0=1, select bank1
  1190  0050  1303               	bcf	3,6	;RP1=0, select bank1
  1191  0051  139F               	bcf	31,7	;volatile
  1192                           
  1193                           ;ADC.c: 42:     }
  1194  0052  28AE               	goto	l1136
  1195  0053                     l1116:	
  1196  0053  0873               	movf	ADConfig@justificado,w
  1197  0054  00F4               	movwf	??_ADConfig
  1198  0055  01F5               	clrf	??_ADConfig+1
  1199                           
  1200                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1201                           ; Switch size 1, requested type "simple"
  1202                           ; Number of cases is 1, Range of values is 0 to 0
  1203                           ; switch strategies available:
  1204                           ; Name         Instructions Cycles
  1205                           ; simple_byte            4     3 (average)
  1206                           ; direct_byte           11     8 (fixed)
  1207                           ; jumptable            260     6 (fixed)
  1208                           ;	Chosen strategy is simple_byte
  1209  0056  0875               	movf	??_ADConfig+1,w
  1210  0057  3A00               	xorlw	0	; case 0
  1211  0058  1903               	skipnz
  1212  0059  285B               	goto	l1668
  1213  005A  284F               	goto	l99
  1214  005B                     l1668:	
  1215                           
  1216                           ; Switch size 1, requested type "simple"
  1217                           ; Number of cases is 2, Range of values is 72 to 76
  1218                           ; switch strategies available:
  1219                           ; Name         Instructions Cycles
  1220                           ; simple_byte            7     4 (average)
  1221                           ; direct_byte           26    11 (fixed)
  1222                           ; jumptable            263     9 (fixed)
  1223                           ;	Chosen strategy is simple_byte
  1224  005B  0874               	movf	??_ADConfig,w
  1225  005C  3A48               	xorlw	72	; case 72
  1226  005D  1903               	skipnz
  1227  005E  284A               	goto	l96
  1228  005F  3A04               	xorlw	4	; case 76
  1229  0060  1903               	skipnz
  1230  0061  284B               	goto	l98
  1231  0062  284F               	goto	l99
  1232  0063                     l101:	
  1233                           ;ADC.c: 44:         case 0:
  1234                           
  1235                           
  1236                           ;ADC.c: 45:             TRISAbits.TRISA0 = 1;
  1237  0063  1405               	bsf	5,0	;volatile
  1238                           
  1239                           ;ADC.c: 46:             ANSELbits.ANS0 = 1;
  1240  0064  1683               	bsf	3,5	;RP0=1, select bank3
  1241  0065  1703               	bsf	3,6	;RP1=1, select bank3
  1242  0066  1408               	bsf	8,0	;volatile
  1243                           
  1244                           ;ADC.c: 47:             ADCON0bits.CHS = 0;
  1245  0067  30C3               	movlw	-61
  1246  0068  1283               	bcf	3,5	;RP0=0, select bank0
  1247  0069  1303               	bcf	3,6	;RP1=0, select bank0
  1248  006A  059F               	andwf	31,f	;volatile
  1249                           
  1250                           ;ADC.c: 48:             break;
  1251  006B  28D0               	goto	l102
  1252  006C                     l103:	
  1253                           ;ADC.c: 49:         case 1:
  1254                           
  1255                           
  1256                           ;ADC.c: 50:             TRISAbits.TRISA1 = 1;
  1257  006C  1485               	bsf	5,1	;volatile
  1258                           
  1259                           ;ADC.c: 51:             ANSELbits.ANS1 = 1;
  1260  006D  1683               	bsf	3,5	;RP0=1, select bank3
  1261  006E  1703               	bsf	3,6	;RP1=1, select bank3
  1262  006F  1488               	bsf	8,1	;volatile
  1263                           
  1264                           ;ADC.c: 52:             ADCON0bits.CHS = 1;
  1265  0070  1283               	bcf	3,5	;RP0=0, select bank0
  1266  0071  1303               	bcf	3,6	;RP1=0, select bank0
  1267  0072  081F               	movf	31,w	;volatile
  1268  0073  39C3               	andlw	-61
  1269  0074  3804               	iorlw	4
  1270  0075  28AC               	goto	L10
  1271  0076                     l104:	
  1272                           ;ADC.c: 54:         case 2:
  1273                           
  1274                           ;ADC.c: 53:             break;
  1275                           
  1276                           
  1277                           ;ADC.c: 55:             TRISAbits.TRISA2 = 1;
  1278  0076  1505               	bsf	5,2	;volatile
  1279                           
  1280                           ;ADC.c: 56:             ANSELbits.ANS2 = 1;
  1281  0077  1683               	bsf	3,5	;RP0=1, select bank3
  1282  0078  1703               	bsf	3,6	;RP1=1, select bank3
  1283  0079  1508               	bsf	8,2	;volatile
  1284                           
  1285                           ;ADC.c: 57:             ADCON0bits.CHS = 2;
  1286  007A  1283               	bcf	3,5	;RP0=0, select bank0
  1287  007B  1303               	bcf	3,6	;RP1=0, select bank0
  1288  007C  081F               	movf	31,w	;volatile
  1289  007D  39C3               	andlw	-61
  1290  007E  3808               	iorlw	8
  1291  007F  28AC               	goto	L10
  1292  0080                     l105:	
  1293                           ;ADC.c: 59:         case 3:
  1294                           
  1295                           ;ADC.c: 58:             break;
  1296                           
  1297                           
  1298                           ;ADC.c: 60:             TRISAbits.TRISA3 = 1;
  1299  0080  1585               	bsf	5,3	;volatile
  1300                           
  1301                           ;ADC.c: 61:             ANSELbits.ANS3 = 1;
  1302  0081  1683               	bsf	3,5	;RP0=1, select bank3
  1303  0082  1703               	bsf	3,6	;RP1=1, select bank3
  1304  0083  1588               	bsf	8,3	;volatile
  1305  0084  2889               	goto	L11
  1306  0085                     l106:	
  1307                           ;ADC.c: 64:         case 4:
  1308                           
  1309                           ;ADC.c: 63:             break;
  1310                           
  1311                           ;ADC.c: 62:             ADCON0bits.CHS = 3;
  1312                           
  1313                           
  1314                           ;ADC.c: 65:             TRISAbits.TRISA5 = 1;
  1315  0085  1685               	bsf	5,5	;volatile
  1316                           
  1317                           ;ADC.c: 66:             ANSELbits.ANS4 = 1;
  1318  0086  1683               	bsf	3,5	;RP0=1, select bank3
  1319  0087  1703               	bsf	3,6	;RP1=1, select bank3
  1320  0088  1608               	bsf	8,4	;volatile
  1321  0089                     L11:	
  1322                           
  1323                           ;ADC.c: 67:             ADCON0bits.CHS = 3;
  1324  0089  1283               	bcf	3,5	;RP0=0, select bank0
  1325  008A  1303               	bcf	3,6	;RP1=0, select bank0
  1326  008B  081F               	movf	31,w	;volatile
  1327  008C  39C3               	andlw	-61
  1328  008D  380C               	iorlw	12
  1329  008E  28AC               	goto	L10
  1330  008F                     l107:	
  1331                           ;ADC.c: 69:         case 5:
  1332                           
  1333                           ;ADC.c: 68:             break;
  1334                           
  1335                           
  1336                           ;ADC.c: 70:             TRISEbits.TRISE0 = 1;
  1337  008F  1409               	bsf	9,0	;volatile
  1338                           
  1339                           ;ADC.c: 71:             ANSELbits.ANS5 = 1;
  1340  0090  1683               	bsf	3,5	;RP0=1, select bank3
  1341  0091  1703               	bsf	3,6	;RP1=1, select bank3
  1342  0092  1688               	bsf	8,5	;volatile
  1343                           
  1344                           ;ADC.c: 72:             ADCON0bits.CHS = 5;
  1345  0093  1283               	bcf	3,5	;RP0=0, select bank0
  1346  0094  1303               	bcf	3,6	;RP1=0, select bank0
  1347  0095  081F               	movf	31,w	;volatile
  1348  0096  39C3               	andlw	-61
  1349  0097  3814               	iorlw	20
  1350  0098  28AC               	goto	L10
  1351  0099                     l108:	
  1352                           ;ADC.c: 74:         case 6:
  1353                           
  1354                           ;ADC.c: 73:             break;
  1355                           
  1356                           
  1357                           ;ADC.c: 75:             TRISEbits.TRISE1 = 1;
  1358  0099  1489               	bsf	9,1	;volatile
  1359                           
  1360                           ;ADC.c: 76:             ANSELbits.ANS6 = 1;
  1361  009A  1683               	bsf	3,5	;RP0=1, select bank3
  1362  009B  1703               	bsf	3,6	;RP1=1, select bank3
  1363  009C  1708               	bsf	8,6	;volatile
  1364                           
  1365                           ;ADC.c: 77:             ADCON0bits.CHS = 6;
  1366  009D  1283               	bcf	3,5	;RP0=0, select bank0
  1367  009E  1303               	bcf	3,6	;RP1=0, select bank0
  1368  009F  081F               	movf	31,w	;volatile
  1369  00A0  39C3               	andlw	-61
  1370  00A1  3818               	iorlw	24
  1371  00A2  28AC               	goto	L10
  1372  00A3                     l109:	
  1373                           ;ADC.c: 79:         case 7:
  1374                           
  1375                           ;ADC.c: 78:             break;
  1376                           
  1377                           
  1378                           ;ADC.c: 80:             TRISEbits.TRISE2 = 1;
  1379  00A3  1509               	bsf	9,2	;volatile
  1380                           
  1381                           ;ADC.c: 81:             ANSELbits.ANS7 = 1;
  1382  00A4  1683               	bsf	3,5	;RP0=1, select bank3
  1383  00A5  1703               	bsf	3,6	;RP1=1, select bank3
  1384  00A6  1788               	bsf	8,7	;volatile
  1385                           
  1386                           ;ADC.c: 82:             ADCON0bits.CHS = 7;
  1387  00A7  1283               	bcf	3,5	;RP0=0, select bank0
  1388  00A8  1303               	bcf	3,6	;RP1=0, select bank0
  1389  00A9  081F               	movf	31,w	;volatile
  1390  00AA  39C3               	andlw	-61
  1391  00AB  381C               	iorlw	28
  1392  00AC                     L10:	
  1393  00AC  009F               	movwf	31	;volatile
  1394                           
  1395                           ;ADC.c: 83:             break;
  1396  00AD  28D0               	goto	l102
  1397  00AE                     l1136:	
  1398  00AE  0872               	movf	ADConfig@canal,w
  1399  00AF  00F4               	movwf	??_ADConfig
  1400  00B0  01F5               	clrf	??_ADConfig+1
  1401                           
  1402                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1403                           ; Switch size 1, requested type "simple"
  1404                           ; Number of cases is 1, Range of values is 0 to 0
  1405                           ; switch strategies available:
  1406                           ; Name         Instructions Cycles
  1407                           ; simple_byte            4     3 (average)
  1408                           ; direct_byte           11     8 (fixed)
  1409                           ; jumptable            260     6 (fixed)
  1410                           ;	Chosen strategy is simple_byte
  1411  00B1  0875               	movf	??_ADConfig+1,w
  1412  00B2  3A00               	xorlw	0	; case 0
  1413  00B3  1903               	skipnz
  1414  00B4  28B6               	goto	l1670
  1415  00B5  28D0               	goto	l102
  1416  00B6                     l1670:	
  1417                           
  1418                           ; Switch size 1, requested type "simple"
  1419                           ; Number of cases is 8, Range of values is 0 to 7
  1420                           ; switch strategies available:
  1421                           ; Name         Instructions Cycles
  1422                           ; simple_byte           25    13 (average)
  1423                           ; direct_byte           32     8 (fixed)
  1424                           ; jumptable            260     6 (fixed)
  1425                           ;	Chosen strategy is simple_byte
  1426  00B6  0874               	movf	??_ADConfig,w
  1427  00B7  3A00               	xorlw	0	; case 0
  1428  00B8  1903               	skipnz
  1429  00B9  2863               	goto	l101
  1430  00BA  3A01               	xorlw	1	; case 1
  1431  00BB  1903               	skipnz
  1432  00BC  286C               	goto	l103
  1433  00BD  3A03               	xorlw	3	; case 2
  1434  00BE  1903               	skipnz
  1435  00BF  2876               	goto	l104
  1436  00C0  3A01               	xorlw	1	; case 3
  1437  00C1  1903               	skipnz
  1438  00C2  2880               	goto	l105
  1439  00C3  3A07               	xorlw	7	; case 4
  1440  00C4  1903               	skipnz
  1441  00C5  2885               	goto	l106
  1442  00C6  3A01               	xorlw	1	; case 5
  1443  00C7  1903               	skipnz
  1444  00C8  288F               	goto	l107
  1445  00C9  3A03               	xorlw	3	; case 6
  1446  00CA  1903               	skipnz
  1447  00CB  2899               	goto	l108
  1448  00CC  3A01               	xorlw	1	; case 7
  1449  00CD  1903               	skipnz
  1450  00CE  28A3               	goto	l109
  1451  00CF  28D0               	goto	l102
  1452  00D0                     l102:	
  1453                           
  1454                           ;ADC.c: 88:     ADCON0bits.ADON = 1;
  1455  00D0  1283               	bcf	3,5	;RP0=0, select bank0
  1456  00D1  141F               	bsf	31,0	;volatile
  1457                           
  1458                           ;ADC.c: 89:     PIR1bits.ADIF = 0;
  1459  00D2  130C               	bcf	12,6	;volatile
  1460                           
  1461                           ;ADC.c: 90:     PIE1bits.ADIE = 1;
  1462  00D3  1683               	bsf	3,5	;RP0=1, select bank1
  1463  00D4  1303               	bcf	3,6	;RP1=0, select bank1
  1464  00D5  170C               	bsf	12,6	;volatile
  1465                           
  1466                           ;ADC.c: 91:     INTCONbits.PEIE = 1;
  1467  00D6  170B               	bsf	11,6	;volatile
  1468                           
  1469                           ;ADC.c: 92:     INTCONbits.GIE = 1;
  1470  00D7  178B               	bsf	11,7	;volatile
  1471                           
  1472                           ;ADC.c: 93:     _delay((unsigned long)((30)*(4000000/4000.0)));
  1473  00D8  3027               	movlw	39
  1474  00D9  00F5               	movwf	??_ADConfig+1
  1475  00DA  30F5               	movlw	245
  1476  00DB  00F4               	movwf	??_ADConfig
  1477  00DC                     u187:	
  1478  00DC  0BF4               	decfsz	??_ADConfig,f
  1479  00DD  28DC               	goto	u187
  1480  00DE  0BF5               	decfsz	??_ADConfig+1,f
  1481  00DF  28DC               	goto	u187
  1482                           
  1483                           ;ADC.c: 94:     ADCON0bits.GO_nDONE = 1;
  1484  00E0  1283               	bcf	3,5	;RP0=0, select bank0
  1485  00E1  1303               	bcf	3,6	;RP1=0, select bank0
  1486  00E2  149F               	bsf	31,1	;volatile
  1487  00E3  0008               	return
  1488  00E4                     __end_of_ADConfig:	
  1489                           
  1490                           	psect	text5
  1491  0179                     __ptext5:	
  1492 ;; *************** function _ADC_CHselect *****************
  1493 ;; Defined at:
  1494 ;;		line 121 in file "ADC.c"
  1495 ;; Parameters:    Size  Location     Type
  1496 ;;  canal           1    wreg     unsigned char 
  1497 ;; Auto vars:     Size  Location     Type
  1498 ;;  canal           1    4[COMMON] unsigned char 
  1499 ;; Return value:  Size  Location     Type
  1500 ;;                  1    wreg      void 
  1501 ;; Registers used:
  1502 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1503 ;; Tracked objects:
  1504 ;;		On entry : 0/0
  1505 ;;		On exit  : 0/0
  1506 ;;		Unchanged: 0/0
  1507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1508 ;;      Params:         0       0       0       0       0
  1509 ;;      Locals:         1       0       0       0       0
  1510 ;;      Temps:          2       0       0       0       0
  1511 ;;      Totals:         3       0       0       0       0
  1512 ;;Total ram usage:        3 bytes
  1513 ;; Hardware stack levels used:    1
  1514 ;; Hardware stack levels required when called:    1
  1515 ;; This function calls:
  1516 ;;		Nothing
  1517 ;; This function is called by:
  1518 ;;		_main
  1519 ;; This function uses a non-reentrant model
  1520 ;;
  1521                           
  1522                           
  1523                           ;psect for function _ADC_CHselect
  1524  0179                     _ADC_CHselect:	
  1525                           
  1526                           ;incstack = 0
  1527                           ; Regs used in _ADC_CHselect: [wreg-fsr0h+status,2+status,0]
  1528                           ;ADC_CHselect@canal stored from wreg
  1529  0179  00F4               	movwf	ADC_CHselect@canal
  1530                           
  1531                           ;ADC.c: 122:     switch (canal){
  1532  017A  29E1               	goto	l1202
  1533  017B                     l125:	
  1534                           ;ADC.c: 123:         case 0:
  1535                           
  1536                           
  1537                           ;ADC.c: 124:             TRISAbits.TRISA0 = 1;
  1538  017B  1683               	bsf	3,5	;RP0=1, select bank1
  1539  017C  1303               	bcf	3,6	;RP1=0, select bank1
  1540  017D  1405               	bsf	5,0	;volatile
  1541                           
  1542                           ;ADC.c: 125:             ANSELbits.ANS0 = 1;
  1543  017E  1683               	bsf	3,5	;RP0=1, select bank3
  1544  017F  1703               	bsf	3,6	;RP1=1, select bank3
  1545  0180  1408               	bsf	8,0	;volatile
  1546                           
  1547                           ;ADC.c: 126:             ADCON0bits.CHS = 0;
  1548  0181  30C3               	movlw	-61
  1549  0182  1283               	bcf	3,5	;RP0=0, select bank0
  1550  0183  1303               	bcf	3,6	;RP1=0, select bank0
  1551  0184  059F               	andwf	31,f	;volatile
  1552                           
  1553                           ;ADC.c: 127:             break;
  1554  0185  0008               	return
  1555  0186                     l127:	
  1556                           ;ADC.c: 128:         case 1:
  1557                           
  1558                           
  1559                           ;ADC.c: 129:             TRISAbits.TRISA1 = 1;
  1560  0186  1683               	bsf	3,5	;RP0=1, select bank1
  1561  0187  1303               	bcf	3,6	;RP1=0, select bank1
  1562  0188  1485               	bsf	5,1	;volatile
  1563                           
  1564                           ;ADC.c: 130:             ANSELbits.ANS1 = 1;
  1565  0189  1683               	bsf	3,5	;RP0=1, select bank3
  1566  018A  1703               	bsf	3,6	;RP1=1, select bank3
  1567  018B  1488               	bsf	8,1	;volatile
  1568                           
  1569                           ;ADC.c: 131:             ADCON0bits.CHS = 1;
  1570  018C  1283               	bcf	3,5	;RP0=0, select bank0
  1571  018D  1303               	bcf	3,6	;RP1=0, select bank0
  1572  018E  081F               	movf	31,w	;volatile
  1573  018F  39C3               	andlw	-61
  1574  0190  3804               	iorlw	4
  1575  0191  009F               	movwf	31	;volatile
  1576                           
  1577                           ;ADC.c: 132:             break;
  1578  0192  0008               	return
  1579  0193                     l128:	
  1580                           ;ADC.c: 133:         case 2:
  1581                           
  1582                           
  1583                           ;ADC.c: 134:             TRISAbits.TRISA2 = 1;
  1584  0193  1683               	bsf	3,5	;RP0=1, select bank1
  1585  0194  1303               	bcf	3,6	;RP1=0, select bank1
  1586  0195  1505               	bsf	5,2	;volatile
  1587                           
  1588                           ;ADC.c: 135:             ANSELbits.ANS2 = 1;
  1589  0196  1683               	bsf	3,5	;RP0=1, select bank3
  1590  0197  1703               	bsf	3,6	;RP1=1, select bank3
  1591  0198  1508               	bsf	8,2	;volatile
  1592                           
  1593                           ;ADC.c: 136:             ADCON0bits.CHS = 2;
  1594  0199  1283               	bcf	3,5	;RP0=0, select bank0
  1595  019A  1303               	bcf	3,6	;RP1=0, select bank0
  1596  019B  081F               	movf	31,w	;volatile
  1597  019C  39C3               	andlw	-61
  1598  019D  3808               	iorlw	8
  1599  019E  009F               	movwf	31	;volatile
  1600                           
  1601                           ;ADC.c: 137:             break;
  1602  019F  0008               	return
  1603  01A0                     l129:	
  1604                           ;ADC.c: 138:         case 3:
  1605                           
  1606                           
  1607                           ;ADC.c: 139:             TRISAbits.TRISA3 = 1;
  1608  01A0  1683               	bsf	3,5	;RP0=1, select bank1
  1609  01A1  1303               	bcf	3,6	;RP1=0, select bank1
  1610  01A2  1585               	bsf	5,3	;volatile
  1611                           
  1612                           ;ADC.c: 140:             ANSELbits.ANS3 = 1;
  1613  01A3  1683               	bsf	3,5	;RP0=1, select bank3
  1614  01A4  1703               	bsf	3,6	;RP1=1, select bank3
  1615  01A5  1588               	bsf	8,3	;volatile
  1616                           
  1617                           ;ADC.c: 141:             ADCON0bits.CHS = 3;
  1618  01A6  1283               	bcf	3,5	;RP0=0, select bank0
  1619  01A7  1303               	bcf	3,6	;RP1=0, select bank0
  1620  01A8  081F               	movf	31,w	;volatile
  1621  01A9  39C3               	andlw	-61
  1622  01AA  380C               	iorlw	12
  1623  01AB  009F               	movwf	31	;volatile
  1624                           
  1625                           ;ADC.c: 142:             break;
  1626  01AC  0008               	return
  1627  01AD                     l130:	
  1628                           ;ADC.c: 143:         case 4:
  1629                           
  1630                           
  1631                           ;ADC.c: 144:             TRISAbits.TRISA5 = 1;
  1632  01AD  1683               	bsf	3,5	;RP0=1, select bank1
  1633  01AE  1303               	bcf	3,6	;RP1=0, select bank1
  1634  01AF  1685               	bsf	5,5	;volatile
  1635                           
  1636                           ;ADC.c: 145:             ANSELbits.ANS4 = 1;
  1637  01B0  1683               	bsf	3,5	;RP0=1, select bank3
  1638  01B1  1703               	bsf	3,6	;RP1=1, select bank3
  1639  01B2  1608               	bsf	8,4	;volatile
  1640                           
  1641                           ;ADC.c: 146:             ADCON0bits.CHS = 3;
  1642  01B3  1283               	bcf	3,5	;RP0=0, select bank0
  1643  01B4  1303               	bcf	3,6	;RP1=0, select bank0
  1644  01B5  081F               	movf	31,w	;volatile
  1645  01B6  39C3               	andlw	-61
  1646  01B7  380C               	iorlw	12
  1647  01B8  009F               	movwf	31	;volatile
  1648                           
  1649                           ;ADC.c: 147:             break;
  1650  01B9  0008               	return
  1651  01BA                     l131:	
  1652                           ;ADC.c: 148:         case 5:
  1653                           
  1654                           
  1655                           ;ADC.c: 149:             TRISEbits.TRISE0 = 1;
  1656  01BA  1683               	bsf	3,5	;RP0=1, select bank1
  1657  01BB  1303               	bcf	3,6	;RP1=0, select bank1
  1658  01BC  1409               	bsf	9,0	;volatile
  1659                           
  1660                           ;ADC.c: 150:             ANSELbits.ANS5 = 1;
  1661  01BD  1683               	bsf	3,5	;RP0=1, select bank3
  1662  01BE  1703               	bsf	3,6	;RP1=1, select bank3
  1663  01BF  1688               	bsf	8,5	;volatile
  1664                           
  1665                           ;ADC.c: 151:             ADCON0bits.CHS = 5;
  1666  01C0  1283               	bcf	3,5	;RP0=0, select bank0
  1667  01C1  1303               	bcf	3,6	;RP1=0, select bank0
  1668  01C2  081F               	movf	31,w	;volatile
  1669  01C3  39C3               	andlw	-61
  1670  01C4  3814               	iorlw	20
  1671  01C5  009F               	movwf	31	;volatile
  1672                           
  1673                           ;ADC.c: 152:             break;
  1674  01C6  0008               	return
  1675  01C7                     l132:	
  1676                           ;ADC.c: 153:         case 6:
  1677                           
  1678                           
  1679                           ;ADC.c: 154:             TRISEbits.TRISE1 = 1;
  1680  01C7  1683               	bsf	3,5	;RP0=1, select bank1
  1681  01C8  1303               	bcf	3,6	;RP1=0, select bank1
  1682  01C9  1489               	bsf	9,1	;volatile
  1683                           
  1684                           ;ADC.c: 155:             ANSELbits.ANS6 = 1;
  1685  01CA  1683               	bsf	3,5	;RP0=1, select bank3
  1686  01CB  1703               	bsf	3,6	;RP1=1, select bank3
  1687  01CC  1708               	bsf	8,6	;volatile
  1688                           
  1689                           ;ADC.c: 156:             ADCON0bits.CHS = 6;
  1690  01CD  1283               	bcf	3,5	;RP0=0, select bank0
  1691  01CE  1303               	bcf	3,6	;RP1=0, select bank0
  1692  01CF  081F               	movf	31,w	;volatile
  1693  01D0  39C3               	andlw	-61
  1694  01D1  3818               	iorlw	24
  1695  01D2  009F               	movwf	31	;volatile
  1696                           
  1697                           ;ADC.c: 157:             break;
  1698  01D3  0008               	return
  1699  01D4                     l133:	
  1700                           ;ADC.c: 158:         case 7:
  1701                           
  1702                           
  1703                           ;ADC.c: 159:             TRISEbits.TRISE2 = 1;
  1704  01D4  1683               	bsf	3,5	;RP0=1, select bank1
  1705  01D5  1303               	bcf	3,6	;RP1=0, select bank1
  1706  01D6  1509               	bsf	9,2	;volatile
  1707                           
  1708                           ;ADC.c: 160:             ANSELbits.ANS7 = 1;
  1709  01D7  1683               	bsf	3,5	;RP0=1, select bank3
  1710  01D8  1703               	bsf	3,6	;RP1=1, select bank3
  1711  01D9  1788               	bsf	8,7	;volatile
  1712                           
  1713                           ;ADC.c: 161:             ADCON0bits.CHS = 7;
  1714  01DA  1283               	bcf	3,5	;RP0=0, select bank0
  1715  01DB  1303               	bcf	3,6	;RP1=0, select bank0
  1716  01DC  081F               	movf	31,w	;volatile
  1717  01DD  39C3               	andlw	-61
  1718  01DE  381C               	iorlw	28
  1719  01DF  009F               	movwf	31	;volatile
  1720                           
  1721                           ;ADC.c: 162:             break;
  1722  01E0  0008               	return
  1723  01E1                     l1202:	
  1724  01E1  0874               	movf	ADC_CHselect@canal,w
  1725  01E2  00F2               	movwf	??_ADC_CHselect
  1726  01E3  01F3               	clrf	??_ADC_CHselect+1
  1727                           
  1728                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1729                           ; Switch size 1, requested type "simple"
  1730                           ; Number of cases is 1, Range of values is 0 to 0
  1731                           ; switch strategies available:
  1732                           ; Name         Instructions Cycles
  1733                           ; simple_byte            4     3 (average)
  1734                           ; direct_byte           11     8 (fixed)
  1735                           ; jumptable            260     6 (fixed)
  1736                           ;	Chosen strategy is simple_byte
  1737  01E4  0873               	movf	??_ADC_CHselect+1,w
  1738  01E5  3A00               	xorlw	0	; case 0
  1739  01E6  1903               	skipnz
  1740  01E7  29E9               	goto	l1672
  1741  01E8  2A03               	goto	l134
  1742  01E9                     l1672:	
  1743                           
  1744                           ; Switch size 1, requested type "simple"
  1745                           ; Number of cases is 8, Range of values is 0 to 7
  1746                           ; switch strategies available:
  1747                           ; Name         Instructions Cycles
  1748                           ; simple_byte           25    13 (average)
  1749                           ; direct_byte           32     8 (fixed)
  1750                           ; jumptable            260     6 (fixed)
  1751                           ;	Chosen strategy is simple_byte
  1752  01E9  0872               	movf	??_ADC_CHselect,w
  1753  01EA  3A00               	xorlw	0	; case 0
  1754  01EB  1903               	skipnz
  1755  01EC  297B               	goto	l125
  1756  01ED  3A01               	xorlw	1	; case 1
  1757  01EE  1903               	skipnz
  1758  01EF  2986               	goto	l127
  1759  01F0  3A03               	xorlw	3	; case 2
  1760  01F1  1903               	skipnz
  1761  01F2  2993               	goto	l128
  1762  01F3  3A01               	xorlw	1	; case 3
  1763  01F4  1903               	skipnz
  1764  01F5  29A0               	goto	l129
  1765  01F6  3A07               	xorlw	7	; case 4
  1766  01F7  1903               	skipnz
  1767  01F8  29AD               	goto	l130
  1768  01F9  3A01               	xorlw	1	; case 5
  1769  01FA  1903               	skipnz
  1770  01FB  29BA               	goto	l131
  1771  01FC  3A03               	xorlw	3	; case 6
  1772  01FD  1903               	skipnz
  1773  01FE  29C7               	goto	l132
  1774  01FF  3A01               	xorlw	1	; case 7
  1775  0200  1903               	skipnz
  1776  0201  29D4               	goto	l133
  1777  0202  2A03               	goto	l134
  1778  0203                     l134:	
  1779  0203  0008               	return
  1780  0204                     __end_of_ADC_CHselect:	
  1781                           
  1782                           	psect	text6
  1783  0221                     __ptext6:	
  1784 ;; *************** function _ISR *****************
  1785 ;; Defined at:
  1786 ;;		line 36 in file "SlaveMain.c"
  1787 ;; Parameters:    Size  Location     Type
  1788 ;;		None
  1789 ;; Auto vars:     Size  Location     Type
  1790 ;;		None
  1791 ;; Return value:  Size  Location     Type
  1792 ;;                  1    wreg      void 
  1793 ;; Registers used:
  1794 ;;		None
  1795 ;; Tracked objects:
  1796 ;;		On entry : 0/0
  1797 ;;		On exit  : 0/0
  1798 ;;		Unchanged: 0/0
  1799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1800 ;;      Params:         0       0       0       0       0
  1801 ;;      Locals:         0       0       0       0       0
  1802 ;;      Temps:          2       0       0       0       0
  1803 ;;      Totals:         2       0       0       0       0
  1804 ;;Total ram usage:        2 bytes
  1805 ;; Hardware stack levels used:    1
  1806 ;; This function calls:
  1807 ;;		Nothing
  1808 ;; This function is called by:
  1809 ;;		Interrupt level 1
  1810 ;; This function uses a non-reentrant model
  1811 ;;
  1812                           
  1813                           
  1814                           ;psect for function _ISR
  1815  0221                     _ISR:	
  1816                           
  1817                           ;SlaveMain.c: 37:     if(ADIE && ADIF){
  1818  0221  1683               	bsf	3,5	;RP0=1, select bank1
  1819  0222  1303               	bcf	3,6	;RP1=0, select bank1
  1820  0223  1F0C               	btfss	12,6	;volatile
  1821  0224  2A30               	goto	i1l42
  1822  0225  1283               	bcf	3,5	;RP0=0, select bank0
  1823  0226  1303               	bcf	3,6	;RP1=0, select bank0
  1824  0227  1F0C               	btfss	12,6	;volatile
  1825  0228  2A30               	goto	i1l42
  1826                           
  1827                           ;SlaveMain.c: 38:         PIE1bits.ADIE = 0;
  1828  0229  1683               	bsf	3,5	;RP0=1, select bank1
  1829  022A  1303               	bcf	3,6	;RP1=0, select bank1
  1830  022B  130C               	bcf	12,6	;volatile
  1831                           
  1832                           ;SlaveMain.c: 39:         banderaADC = 1;
  1833  022C  1283               	bcf	3,5	;RP0=0, select bank0
  1834  022D  1303               	bcf	3,6	;RP1=0, select bank0
  1835  022E  01A3               	clrf	_banderaADC
  1836  022F  0AA3               	incf	_banderaADC,f
  1837  0230                     i1l42:	
  1838  0230  0871               	movf	??_ISR+1,w
  1839  0231  008A               	movwf	10
  1840  0232  0E70               	swapf	??_ISR^(0+4294967168),w
  1841  0233  0083               	movwf	3
  1842  0234  0EFE               	swapf	126,f
  1843  0235  0E7E               	swapf	126,w
  1844  0236  0009               	retfie
  1845  0237                     __end_of_ISR:	
  1846  007E                     btemp	set	126	;btemp
  1847  007E                     wtemp0	set	126
  1848                           
  1849                           	psect	intentry
  1850  0004                     __pintentry:	
  1851                           ;incstack = 0
  1852                           ; Regs used in _ISR: []
  1853                           
  1854  0004                     interrupt_function:	
  1855  007E                     saved_w	set	btemp
  1856  0004  00FE               	movwf	btemp
  1857  0005  0E03               	swapf	3,w
  1858  0006  00F0               	movwf	??_ISR
  1859  0007  080A               	movf	10,w
  1860  0008  00F1               	movwf	??_ISR+1
  1861  0009  120A  118A  2A21   	ljmp	_ISR


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         5
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      11
    BANK0            80      3       4
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_ADConfig

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0     670
                                              0 BANK0      3     3      0
                       _ADC_CHselect
                           _ADConfig
                       _AnalogRead_8
                           _SPI_init
                          _SPI_write
 ---------------------------------------------------------------------------------
 (1) _SPI_write                                            1     1      0      22
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SPI_init                                             4     1      3     360
                                              2 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (1) _AnalogRead_8                                         4     4      0      48
                                              2 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (1) _ADConfig                                             5     3      2     218
                                              2 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (1) _ADC_CHselect                                         3     3      0      22
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _ISR                                                  2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_CHselect
   _ADConfig
   _AnalogRead_8
   _SPI_init
   _SPI_write

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      7       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       F       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      3       4       5        5.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       F      12        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Sat Feb 15 18:25:21 2020

             __CFG_CP$OFF 0000               _SSPSTATbits 0094                        _BF 04A0  
                      l96 004A                        l98 004B                        l99 004F  
                     l101 0063                       l102 00D0                       l103 006C  
                     l104 0076                       l105 0080                       l130 01AD  
                     l106 0085                       l131 01BA                       l107 008F  
                     l132 01C7                       l108 0099                       l133 01D4  
                     l125 017B                       l109 00A3                       l134 0203  
                     l150 0245                       l127 0186                       l128 0193  
                     l129 01A0                       u177 015E              __CFG_CPD$OFF 0000  
                     u187 00DC                       _ISR 0221     __size_of_ADC_CHselect 008B  
            __CFG_LVP$OFF 0000                      ?_ISR 0070                      l1110 0028  
                    l1112 002D                      l1104 001C                      l1202 01E1  
                    l1106 0021                      l1114 0034                      l1108 0022  
                    l1116 0053                      l1136 00AE                      l1160 0241  
                    l1172 020F                      l1174 021F                      l1166 0206  
                    l1168 0208                      l1450 0124                      l1442 00FA  
                    l1452 0127                      l1454 013A                      l1446 0100  
                    l1462 0144                      l1480 0164                      l1472 0154  
                    l1448 0112                      l1476 0162                      l1484 0166  
                    l1468 0150                      l1660 0132                      l1670 00B6  
                    l1662 016F                      l1486 0177                      l1672 01E9  
                    l1664 0217                      l1666 003C                      l1668 005B  
                    _ADIE 0466                      _ADIF 0066                      i1l42 0230  
            __CFG_WRT$OFF 0000                      _main 00E4                      btemp 007E  
                    start 000C             __CFG_IESO$OFF 0000          __end_of_ADConfig 00E4  
                   ??_ISR 0070                     ?_main 0070              _ADC_CHselect 0179  
           __CFG_WDTE$OFF 0000            __CFG_FCMEN$OFF 0000           SPI_init@muestra 0072  
          __CFG_BOREN$OFF 0000                     pclath 000A          __end_of_SPI_init 024B  
                   status 0003                     wtemp0 007E        __size_of_SPI_write 0006  
          __CFG_MCLRE$OFF 0000           __initialization 000F              __end_of_main 0179  
                  ??_main 0020     __size_of_AnalogRead_8 001D                    _ADRESH 001E  
                  _ADRESL 009E                    _TRISC3 043B                    _TRISC5 043D  
                  _SSPBUF 0013                    _SSPCON 0014            __CFG_PWRTE$OFF 0000  
            _AnalogRead_8 0204                    saved_w 007E         __end_of_SPI_write 0251  
               ?_ADConfig 0072   __end_of__initialization 0016              SPI_init@edge 0074  
            SPI_init@idle 0073              SPI_init@modo 0075            __pcstackCOMMON 0070  
               ?_SPI_init 0072                _banderaADC 0023                ??_ADConfig 0074  
              __pbssBANK0 0023                __pmaintext 00E4             ADConfig@canal 0072  
              __pintentry 0004                ??_SPI_init 0075           ADConfig@oscFreq 0076  
                 _SSPSTAT 0094    AnalogRead_8@conversion 0075                 _ANSELbits 0188  
                 __ptext1 024B                   __ptext2 0237                   __ptext3 0204  
                 __ptext4 001A                   __ptext5 0179                   __ptext6 0221  
            __size_of_ISR 0016      end_of_initialization 0016                 _TRISAbits 0085  
               _TRISEbits 0089                 _SPI_write 024B         __size_of_ADConfig 00CA  
     start_initialization 000F         __size_of_SPI_init 0014               __end_of_ISR 0237  
              ?_SPI_write 0070  __CFG_FOSC$INTRC_NOCLKOUT 0000             ?_ADC_CHselect 0070  
             __pbssCOMMON 0077                 ___latbits 0002             __pcstackBANK0 0020  
           SPI_write@dato 0072            ??_ADC_CHselect 0072                  _ADConfig 001A  
             ??_SPI_write 0072         interrupt_function 0004                  _PIE1bits 008C  
                _PIR1bits 000C             ?_AnalogRead_8 0070                _ADCON0bits 001F  
              _ADCON1bits 009F                  _SPI_init 0237       ADConfig@justificado 0073  
          ??_AnalogRead_8 0072         __CFG_BOR4V$BOR40V 0000              _valorADC_CH0 0079  
            _valorADC_CH5 007A         ADC_CHselect@canal 0074      __end_of_ADC_CHselect 0204  
           __size_of_main 0095               _instruccion 0078                _INTCONbits 000B  
                intlevel1 0000          AnalogRead_8@just 0074          _bandera_recibido 0077  
    __end_of_AnalogRead_8 0221  
